package ACR_Library
import AbilityGlobals
import ClosureTimers
import DummyCaster
import OrderIds
import ClosureForGroups
import TimerUtils
import ACR_TagSystem
import ObjectDefinitions
import AbilityClassifications
import Translate_Q
import Translate_W
import Translate_E
import Translate_R
import Translate_T
import Translate_F
import Translate_G
// import ClosureEvents

group array acrAoePauseGroup
group array acrAoeSlowGroup
group array acrAoeSilenceGroup
unit array acrStunnedUnit
unit array acrSlowedUnit
unit array acrPulledUnit
unit array acrSilencedUnit
unit array acrKnockbackedVictim
unit array acrPullCaster
unit array acrSlowCaster
timer array acrStunTimer
timer array acrSilenceTimer
timer array acrKnockbackTimer
timer array acrPullTimer
timer array acrSlowTimer
real array acrStunDuration
real array acrSilenceDuration
real array acrSlowDuration
real array acrSlowPercentage
real array acrStunCount
real array acrSilenceCount
real array acrSlowCount
real array acrKnockbackDistance
real array acrPullDistance
public real array acrCooldownQ
public real array acrCooldownQ2
public real array acrCooldownModoQ
public real array acrCooldownModoQ2
public real array acrCooldownW
public real array acrCooldownW2
public real array acrCooldownModoW
public real array acrCooldownModoW2
public real array acrCooldownE
public real array acrCooldownE2
public real array acrCooldownModoE
public real array acrCooldownModoE2
public real array acrCooldownR
public real array acrCooldownR2
public real array acrCooldownR3
public real array acrCooldownModoR
public real array acrCooldownModoR2
public real array acrCooldownT
public real array acrCooldownT2
public real array acrCooldownModoT
public real array acrCooldownModoT2
public real array acrCooldownF
public real array acrCooldownF2
public real array acrCooldownF3
public real array acrCooldownModoF
public real array acrCooldownModoF2
public real array acrCooldownG
public real array acrCooldownG2
public real array acrCooldownModoG
public real array acrCooldownModoG2
int array acrKnockbackCount
int array acrPullCount
boolean array acrUnitIsPauseExed
public boolean array transformationActive 
vec2 array acrKnockbackCasterPos
vec2 array acrKnockbackVictimPos
vec2 array acrPullCasterBasePos



// API

public function acrCreateSound(string fileName) returns sound
    let t = CreateSound(fileName, false, false, false, 0, 0, "")
    return t

public function unit.setUnitAttackRange (int desired_range) // Sets the unit attack range to whatever you want
    let desired_range_real = desired_range.toReal()
    let current_range_first = this.getFieldWeapon(UNIT_WEAPON_RF_ATTACK_RANGE, 0)
    let currange_range_second = this.getFieldWeapon(UNIT_WEAPON_RF_ATTACK_RANGE, 1)
    this.setFieldWeapon(UNIT_WEAPON_RF_ATTACK_RANGE, 1, desired_range_real - current_range_first + currange_range_second)

// Math
public function acrCooldownTracker()
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT)
    ..addAction() ->
        let caster = GetSpellAbilityUnit()
        let p = caster.getOwner()
        let id = p.getId()
        if GetSpellAbilityId() == SPELL_Q[id]
            acrCooldownQ[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownQ[id] = caster.getAbilityCooldownRemaining(SPELL_Q[id])
                if acrCooldownQ[id] <= 0.2
                    destroy cb
                    acrCooldownQ[id] = 0.0
        else if GetSpellAbilityId() == SPELL_Q2[id]
            acrCooldownQ2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownQ2[id] = caster.getAbilityCooldownRemaining(SPELL_Q2[id])
                if acrCooldownQ2[id] <= 0.2
                    destroy cb
                    acrCooldownQ2[id] = 0.0
        else if GetSpellAbilityId() == SPELL_MODO_Q[id]
            acrCooldownModoQ[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoQ[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_Q[id])
                if acrCooldownModoQ[id] <= 0.2
                    destroy cb
                    acrCooldownModoQ[id] = 0.0
        else if GetSpellAbilityId() == SPELL_MODO_Q2[id]
            acrCooldownModoQ2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoQ2[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_Q2[id])
                if acrCooldownModoQ2[id] <= 0.2
                    destroy cb
                    acrCooldownModoQ2[id] = 0.0
        else if GetSpellAbilityId() == SPELL_W[id]
            acrCooldownW[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownW[id] = caster.getAbilityCooldownRemaining(SPELL_W[id])
                if acrCooldownW[id] <= 0.2
                    destroy cb
                    acrCooldownW[id] = 0.0
        else if GetSpellAbilityId() == SPELL_W2[id]
            acrCooldownW2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownW2[id] = caster.getAbilityCooldownRemaining(SPELL_W2[id])
                if acrCooldownW2[id] <= 0.2
                    destroy cb
                    acrCooldownW2[id] = 0.0
        else if GetSpellAbilityId() == SPELL_MODO_W[id]
            acrCooldownModoW[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoW[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_W[id])
                if acrCooldownModoW[id] <= 0.2
                    destroy cb 
                    acrCooldownModoW[id] = 0.0                                                                                               
        else if GetSpellAbilityId() == SPELL_MODO_W2[id]
            acrCooldownModoW2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoW2[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_W2[id])
                if acrCooldownModoW2[id] <= 0.2
                    destroy cb       
                    acrCooldownModoW2[id] = 0.0         
        else if GetSpellAbilityId() == SPELL_E[id]
            acrCooldownE[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownE[id] = caster.getAbilityCooldownRemaining(SPELL_E[id])
                if acrCooldownE[id] <= 0.2
                    destroy cb   
                    acrCooldownE[id] = 0.0 
        else if GetSpellAbilityId() == SPELL_E2[id]
            acrCooldownE2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownE2[id] = caster.getAbilityCooldownRemaining(SPELL_E2[id])
                if acrCooldownE2[id] <= 0.2
                    destroy cb
                    acrCooldownE2[id] = 0.0
        else if GetSpellAbilityId() == SPELL_MODO_E[id]
            acrCooldownModoE[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoE[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_E[id])
                if acrCooldownModoE[id] <= 0.2
                    destroy cb 
                    acrCooldownModoE[id] = 0.0

        else if GetSpellAbilityId() == SPELL_MODO_E2[id]
            acrCooldownModoE2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoE2[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_E2[id])
                if acrCooldownModoE2[id] <= 0.2
                    destroy cb  
                    acrCooldownModoE2[id] = 0.0                                    
        else if GetSpellAbilityId() == SPELL_R[id]
            acrCooldownR[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownR[id] = caster.getAbilityCooldownRemaining(SPELL_R[id])
                if acrCooldownR[id] <= 0.2
                    destroy cb
                    acrCooldownR[id] = 0.0
        else if GetSpellAbilityId() == SPELL_R2[id]
            acrCooldownR2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownR2[id] = caster.getAbilityCooldownRemaining(SPELL_R2[id])
                if acrCooldownR2[id] <= 0.2
                    destroy cb
                    acrCooldownR2[id] = 0.0
        else if GetSpellAbilityId() == SPELL_R3[id]
            acrCooldownR3[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownR3[id] = caster.getAbilityCooldownRemaining(SPELL_R3[id])
                if acrCooldownR3[id] <= 0.2
                    destroy cb  
                    acrCooldownR3[id] = 0.0                  
        else if GetSpellAbilityId() == SPELL_MODO_R[id]
            acrCooldownModoR[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoR[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_R[id])
                if acrCooldownModoR[id] <= 0.2
                    destroy cb
                    acrCooldownModoR[id] = 0.0
        else if GetSpellAbilityId() == SPELL_MODO_R2[id]
            acrCooldownModoR2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoR2[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_R2[id])
                if acrCooldownModoR2[id] <= 0.2
                    destroy cb
                    acrCooldownModoR2[id] = 0.0
        else if GetSpellAbilityId() == SPELL_T[id]
            acrCooldownT[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownT[id] = caster.getAbilityCooldownRemaining(SPELL_T[id])
                if acrCooldownT[id] <= 0.2
                    destroy cb   
                    acrCooldownT[id] = 0.0                 
        else if GetSpellAbilityId() == SPELL_T2[id]
            acrCooldownT2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownT2[id] = caster.getAbilityCooldownRemaining(SPELL_T2[id])
                if acrCooldownT2[id] <= 0.2
                    destroy cb 
                    acrCooldownT2[id] = 0.0
        else if GetSpellAbilityId() == SPELL_MODO_T[id]
            acrCooldownModoT[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoT[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_T[id])
                if acrCooldownModoT[id] <= 0.2
                    destroy cb
                    acrCooldownModoT[id] = 0.0
        else if GetSpellAbilityId() == SPELL_MODO_T2[id]
            acrCooldownModoT2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoT2[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_T2[id])
                if acrCooldownModoT2[id] <= 0.2
                    destroy cb  
                    acrCooldownModoT2[id] = 0.0                    
        else if GetSpellAbilityId() == SPELL_F[id]
            acrCooldownF[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownF[id] = caster.getAbilityCooldownRemaining(SPELL_F[id])
                if acrCooldownF[id] <= 0.2
                    destroy cb 
                    acrCooldownF[id] = 0.0 
        else if GetSpellAbilityId() == SPELL_F2[id]
            acrCooldownF2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownF2[id] = caster.getAbilityCooldownRemaining(SPELL_F2[id])
                if acrCooldownF2[id] <= 0.2
                    destroy cb 
                    acrCooldownF2[id] = 0.0 
        else if GetSpellAbilityId() == SPELL_F3[id]
            acrCooldownF3[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownF3[id] = caster.getAbilityCooldownRemaining(SPELL_F3[id])
                if acrCooldownF3[id] <= 0.2
                    destroy cb 
                    acrCooldownF3[id] = 0.0 
        else if GetSpellAbilityId() == SPELL_MODO_F[id]
            acrCooldownModoF[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoF[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_F[id])
                if acrCooldownModoF[id] <= 0.2
                    destroy cb 
                    acrCooldownModoF[id] = 0.0
        else if GetSpellAbilityId() == SPELL_MODO_F2[id]
            acrCooldownModoF2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoF2[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_F2[id])
                if acrCooldownModoF2[id] <= 0.2
                    destroy cb 
                    acrCooldownModoF2[id] = 0.0
        else if GetSpellAbilityId() == SPELL_G[id]
            acrCooldownG[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownG[id] = caster.getAbilityCooldownRemaining(SPELL_G[id])
                if acrCooldownG[id] <= 0.2
                    destroy cb 
                    acrCooldownG[id] = 0.0
        else if GetSpellAbilityId() == SPELL_G2[id]
            acrCooldownG2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownG2[id] = caster.getAbilityCooldownRemaining(SPELL_G2[id])
                if acrCooldownG2[id] <= 0.2
                    destroy cb 
                    acrCooldownG2[id] = 0.0
        else if GetSpellAbilityId() == SPELL_MODO_G[id]
            acrCooldownModoG[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoG[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_G[id])
                if acrCooldownModoG[id] <= 0.2
                    destroy cb
                    acrCooldownModoG[id] = 0.0 
        else if GetSpellAbilityId() == SPELL_MODO_G2[id]
            acrCooldownModoG2[id] = 50.00
            doPeriodically(0.2) (CallbackPeriodic cb) ->
                acrCooldownModoG2[id] = caster.getAbilityCooldownRemaining(SPELL_MODO_G2[id])
                if acrCooldownModoG2[id] <= 0.2
                    destroy cb   
                    acrCooldownModoG2[id] = 0.0               

public function getAngle2D(real x, real y, real x2, real y2) returns real
    let dx = x2 - x
    let dy = y2 - y
    return bj_RADTODEG * Atan2(dx, dy)

public function newX(real locX, real dist, real angle) returns real
    return locX + dist * Cos(Deg2Rad(angle))

public function newY(real locY, real dist, real angle) returns real
    return locY + dist * Sin(Deg2Rad(angle))

public function getAxisAngle(real fromX, real fromY, real targetX, real targetY) returns real
    return Rad2Deg(Atan2(targetY - fromY, targetX - fromX))

public function getAngleCast(unit caster, real targetX, real targetY) returns real
    let fromX = GetUnitX(caster)
    let fromY = GetUnitY(caster)
    if fromX == targetX and fromY == targetY
        return GetUnitFacing(caster)
    return getAxisAngle(fromX, fromY, targetX, targetY)

function acrKnockbackEnd()
    let id = GetExpiredTimer().getData()
    let victimPos = vec2(GetUnitX(acrKnockbackedVictim[id]), GetUnitY(acrKnockbackedVictim[id]))
    let dist = acrKnockbackCasterPos[id].distanceTo(victimPos) + (acrKnockbackDistance[id] / 35)
    let angle = acrKnockbackCasterPos[id].angleTo(victimPos)
    let polar = acrKnockbackCasterPos[id].polarOffset(angle, dist)    
    acrKnockbackedVictim[id].setPos(polar)
    acrKnockbackCount[id]++
    if acrKnockbackedVictim[id].hasTagPauseEX() == false    
        acrKnockbackedVictim[id].pauseEx()
        acrKnockbackedVictim[id].addTagPauseEX()  
    if acrKnockbackedVictim[id].hasTagKnockback() == false
        acrKnockbackedVictim[id].addTagKnockback()
    if acrKnockbackCount[id] == 35
        acrKnockbackTimer[id].release()
        if acrKnockbackedVictim[id].hasTagPauseEX()
            acrKnockbackedVictim[id].unpauseEx()
            acrKnockbackedVictim[id].removeTagPauseEX()
        if acrKnockbackedVictim[id].hasTagKnockback()    
            acrKnockbackedVictim[id].removeTagKnockback()

public function acrKnockback(unit caster, unit victim, real distance)
    if victim.isInvulnerable() == false
        if victim.hasTagPauseEX() == false
            IssueImmediateOrder(victim, "stop")   
        let id = victim.getUserData()
        acrKnockbackCasterPos[id] = vec2(GetUnitX(caster), GetUnitY(caster))
        acrKnockbackCount[id] = 0
        acrKnockbackedVictim[id] = victim
        acrKnockbackDistance[id] = distance 
        if victim.hasTagKnockback()
            acrKnockbackTimer[id].release()
        if victim.hasTagKnockback() == false    
            victim.addTagKnockback()    
        acrKnockbackTimer[id] = CreateTimer()..startPeriodic(0.02, function acrKnockbackEnd)..setData(id) 

function acrPullEnd()
    let id = GetExpiredTimer().getData()
    let casterPos = vec2(GetUnitX(acrPullCaster[id]), GetUnitY(acrPullCaster[id]))
    let victimPos = vec2(GetUnitX(acrPulledUnit[id]), GetUnitY(acrPulledUnit[id]))
    let dist = acrPullCasterBasePos[id].distanceTo(victimPos) - (acrPullDistance[id] / 35)
    let angle = acrPullCasterBasePos[id].angleTo(victimPos)
    let polar = acrPullCasterBasePos[id].polarOffset(angle, dist)                
    acrPulledUnit[id].setPos(polar)
    acrPullCount[id]++
    if acrPulledUnit[id].hasTagPull() == false    
        acrPulledUnit[id].addTagPull()   
    if acrPulledUnit[id].hasTagPauseEX() == false    
        acrPulledUnit[id].pauseEx()
        acrPulledUnit[id].addTagPauseEX()
    if acrPullCount[id] == 35 or casterPos.distanceTo(victimPos) <= 150
        acrPullTimer[id].release()
        if acrPulledUnit[id].hasTagPauseEX()
            acrPulledUnit[id].unpauseEx()
            acrPulledUnit[id].removeTagPauseEX()
        if acrPulledUnit[id].hasTagPull()     
            acrPulledUnit[id].removeTagPull()                       

public function acrPull(unit caster, unit victim, real distance)
    if victim.isInvulnerable() == false
        if victim.hasTagPauseEX() == false
            IssueImmediateOrder(victim, "stop")   
        let id = victim.getUserData()
        if victim.hasTagPull()
            acrPullTimer[id].release()
        acrPullCaster[id] = caster
        acrPullCasterBasePos[id] = vec2(GetUnitX(caster), GetUnitY(caster))
        acrPullCount[id] = 0
        acrPulledUnit[id] = victim
        acrPullDistance[id] = distance
        if victim.hasTagPull() == false
            victim.addTagPull() 
        acrPullTimer[id] = CreateTimer()..startPeriodic(0.02, function acrPullEnd)..setData(id)
            
function acrSilenceEnd()
    let id = GetExpiredTimer().getData()
    if acrSilencedUnit[id].hasTagSilence() == false
        acrSilencedUnit[id].addTagSilence()
    acrSilenceCount[id] = acrSilenceCount[id] + 0.02         
    if acrSilenceCount[id] >= acrSilenceDuration[id]
        GetExpiredTimer().release()
        if acrSilencedUnit[id].hasTagSilence()
            acrSilencedUnit[id].removeAbility(SILENCE_DEBUFF)
            acrSilencedUnit[id].removeTagSilence()      

public function acrSilence(unit caster, unit victim, real duration)
    if victim.isInvulnerable() == false 
        let id = victim.getUserData()
        acrSilencedUnit[id] = victim
        acrSilenceDuration[id] = duration
        acrSilenceCount[id] = 0.0
        if victim.hasTagSilence()
            acrSilenceTimer[id].release()
        else
            new DummyCaster()
            ..owner(caster.getOwner())
            ..origin(victim.getPos())
            ..castTarget(SILENCE_DUMMY_SPELL, 1, OrderIds.soulburn, victim)
            victim.addTagSilence()      
        acrSilenceTimer[id] = CreateTimer()..startPeriodic(0.02, function acrSilenceEnd)..setData(id)

function acrStunEnd()
    let id = GetExpiredTimer().getData()
    // if acrStunnedUnit[id].isPaused() == true
    //     if acrStunnedUnit[id].isInvulnerable() == true
    //         DoNothing()
    //     else        
    //         acrStunCount[id] = acrStunCount[id] + 0.02
    // else
    if acrStunnedUnit[id].hasTagStun() == false
        acrStunnedUnit[id].addTagStun()
    acrStunCount[id] = acrStunCount[id] + 0.02         
    if acrStunCount[id] >= acrStunDuration[id]
        acrStunTimer[id].release()
        if acrStunnedUnit[id].hasTagStun()
            acrStunnedUnit[id].removeAbility('B06J')
            acrStunnedUnit[id].removeTagStun()        

public function acrStun(unit caster, unit victim, real duration)
    if victim.isInvulnerable() == false
        if victim.hasTagPauseEX() == false
            IssueImmediateOrder(victim, "stop")
        let id = victim.getUserData()         
        acrStunnedUnit[id] = victim
        acrStunDuration[id] = duration
        acrStunCount[id] = 0.0
        if victim.hasTagStun()
            acrStunTimer[id].release()
        else
            new DummyCaster()
            ..owner(caster.getOwner())
            ..origin(victim.getPos())
            ..castTarget('A193', 1, OrderIds.thunderbolt, victim)
            victim.addTagStun()      
        acrStunTimer[id] = CreateTimer()..startPeriodic(0.02, function acrStunEnd)..setData(id)

function acrSlowEnd()
    let id = GetExpiredTimer().getData()
    // if acrSlowedUnit[id].isPaused() == true
    //     if acrSlowedUnit[id].isInvulnerable() == true
    //         DoNothing()
    //     else        
    //         acrSlowCount[id] = acrSlowCount[id] + 0.02
    // else
    if acrSlowedUnit[id].hasTagSlow() == false
        new DummyCaster()
        ..owner(acrSlowCaster[id].getOwner())
        ..origin(acrSlowedUnit[id].getPos())
        ..castTarget('A18Y', 1, OrderIds.slow, acrSlowedUnit[id])
        acrSlowedUnit[id].setMoveSpeed(acrSlowedUnit[id].getDefaultMovespeed() - (acrSlowedUnit[id].getDefaultMovespeed() * (acrSlowPercentage[id] / 100)))
        acrSlowedUnit[id].addTagSlow()
    acrSlowCount[id] = acrSlowCount[id] + 0.02               
    if acrSlowCount[id] >= acrSlowDuration[id]
        GetExpiredTimer().release()
        if acrSlowedUnit[id].hasTagSlow()
            acrSlowedUnit[id].setMoveSpeed(acrSlowedUnit[id].getDefaultMovespeed())
            acrSlowedUnit[id].removeAbility('B06P')
            acrSlowedUnit[id].removeTagSlow()

public function acrSlow(unit caster, unit victim, real slowPercentage, real duration)
    if victim.isInvulnerable() == false
        let id = victim.getUserData()
        acrSlowCaster[id] = caster
        acrSlowedUnit[id] = victim
        acrSlowPercentage[id] = slowPercentage
        acrSlowDuration[id] = duration
        acrSlowCount[id] = 0.0
        if victim.hasTagSlow()
            acrSlowTimer[id].release()
        else     
            new DummyCaster()
            ..owner(caster.getOwner())
            ..origin(victim.getPos())
            ..castTarget('A18Y', 1, OrderIds.slow, victim)
            victim.addTagSlow()
        if victim.getMoveSpeed() > (victim.getDefaultMovespeed() - (victim.getDefaultMovespeed() * (slowPercentage / 100)))  
            victim.setMoveSpeed(victim.getDefaultMovespeed() - (victim.getDefaultMovespeed() * (slowPercentage / 100)))
        acrSlowTimer[id] = CreateTimer()..startPeriodic(0.02, function acrSlowEnd)..setData(id)

public function acrAoeSlow(unit caster, vec2 targetPoint, real aoe, real slowPercentage, real duration)
    let id = caster.getUserData()
    if acrAoeSlowGroup[id] == null
        acrAoeSlowGroup[id] = CreateGroup()            
    doPeriodicallyTimed(0.02, duration) (CallbackCounted cb) ->      
        forUnitsInRange(targetPoint, aoe) (unit victim) ->
            if caster.isEnemyOf(victim) and victim.isInvulnerable() == false
                if acrAoeSlowGroup[id].has(victim) == false
                    acrAoeSlowGroup[id].add(victim)
                if victim.hasTagSlow() == false
                    new DummyCaster()
                    ..owner(caster.getOwner())
                    ..origin(victim.getPos())
                    ..castTarget('A18Y', 1, OrderIds.slow, victim)
                    victim.setMoveSpeed(victim.getDefaultMovespeed() - (victim.getDefaultMovespeed() * (slowPercentage / 100)))
                    victim.addTagSlow()
                else if victim.getMoveSpeed() > (victim.getDefaultMovespeed() - (victim.getDefaultMovespeed() * (slowPercentage / 100)))
                    victim.setMoveSpeed(victim.getDefaultMovespeed() - (victim.getDefaultMovespeed() * (slowPercentage / 100)))
    doPeriodicallyTimed(0.02, duration) (CallbackCounted cb) ->       
        acrAoeSlowGroup[id].forEachIn() (unit victim) ->
            if targetPoint.distanceTo(vec2(GetUnitX(victim), GetUnitY(victim))) > aoe
                if victim.hasTagSlow()                                 
                    victim.setMoveSpeed(victim.getDefaultMovespeed())
                    victim.removeAbility('B06P')
                    victim.removeTagSlow()
                    acrAoeSlowGroup[id].remove(victim)
    doAfter(duration + 0.02) ->
        acrAoeSlowGroup[id].forEachIn() (unit victim) ->
            if victim.hasTagSlow()                                 
                victim.setMoveSpeed(victim.getDefaultMovespeed())
                victim.removeAbility('B06P')
                victim.removeTagSlow()
            acrAoeSlowGroup[id].remove(victim)

        
    // CreateTimer()..setData(id)..start(duration + 0.02) () ->
    //     let id1 = GetExpiredTimer().getData()
    //     acrAoeSlowGroup[id1].forEachIn() (unit victim) ->
    //         if victim.hasTagSlow()                                 
    //             victim.setMoveSpeed(victim.getDefaultMovespeed())
    //             victim.removeAbility('B06P')
    //             victim.removeTagSlow()
    //         acrAoeSlowGroup[id1].remove(victim)

                    

public function acrAoePause(unit caster, vec2 targetPoint, real aoe, real duration)
    let id = caster.getUserData() 
    forUnitsInRange(targetPoint, aoe) (unit victim) ->
        if caster.isEnemyOf(victim) and victim.isInvulnerable() == false and victim.hasTagPauseEX() == false
            IssueImmediateOrder(victim, "stop")
    if acrAoePauseGroup[id] == null
        acrAoePauseGroup[id] = CreateGroup()
    doPeriodicallyTimed(0.02, duration) (CallbackCounted cb) ->   
        forUnitsInRange(targetPoint, aoe) (unit victim) ->
            if caster.isEnemyOf(victim) and victim.isInvulnerable() == false and victim.hasTagPauseEX() == false
                victim.pauseEx()
                victim.addTagPauseEX()
            if caster.isEnemyOf(victim) and victim.isInvulnerable() == false and acrAoePauseGroup[id].has(victim) == false
                acrAoePauseGroup[id].add(victim)
            if caster.isEnemyOf(victim) and victim.isInvulnerable() == true and acrAoePauseGroup[id].has(victim) == true and victim.hasTagPauseEX() == true
                victim.unpauseEx()
                victim.removeTagPauseEX()   
    doPeriodicallyTimed(0.02, duration) (CallbackCounted cb) ->
        acrAoePauseGroup[id].forEachIn() (unit victim) ->
            if targetPoint.distanceTo(vec2(GetUnitX(victim), GetUnitY(victim))) > aoe
                if victim.hasTagPauseEX()                                 
                    victim.unpauseEx()
                    victim.removeTagPauseEX()
                    acrAoePauseGroup[id].remove(victim)
    doAfter(duration + 0.02) ->            
        acrAoePauseGroup[id].forEachIn() (unit victim) ->
            if victim.hasTagPauseEX()                                 
                victim.unpauseEx()
                victim.removeTagPauseEX()
            acrAoePauseGroup[id].remove(victim)            

public function acrAoeSilence(unit caster, vec2 targetPoint, real aoe, real duration)
    let id = caster.getUserData()
    if acrAoeSilenceGroup[id] == null
        acrAoeSilenceGroup[id] = CreateGroup()            
    doPeriodicallyTimed(0.02, duration) (CallbackCounted cb) ->      
        forUnitsInRange(targetPoint, aoe) (unit victim) ->
            if caster.isEnemyOf(victim) and victim.isInvulnerable() == false
                if acrAoeSilenceGroup[id].has(victim) == false
                    acrAoeSilenceGroup[id].add(victim)
                if victim.hasTagSilence() == false
                    new DummyCaster()
                    ..owner(caster.getOwner())
                    ..origin(victim.getPos())
                    ..castTarget(SILENCE_DUMMY_SPELL, 1, OrderIds.soulburn, victim)
                    victim.addTagSilence()  
    doPeriodicallyTimed(0.02, duration) (CallbackCounted cb) ->       
        acrAoeSilenceGroup[id].forEachIn() (unit victim) ->
            if targetPoint.distanceTo(vec2(GetUnitX(victim), GetUnitY(victim))) > aoe
                if victim.hasTagSilence()                                 
                    victim.removeAbility(SILENCE_DEBUFF)
                    victim.removeTagSilence()
                    acrAoeSilenceGroup[id].remove(victim)
    doAfter(duration + 0.02) ->
        acrAoeSilenceGroup[id].forEachIn() (unit victim) ->
            if victim.hasTagSilence()                                 
                victim.removeAbility(SILENCE_DEBUFF)
                victim.removeTagSilence()
            acrAoeSilenceGroup[id].remove(victim) 

public function acrAbilityReset(player p)
    let id = p.getId()       
    if udg_PlayHero[id].isModeHeroTransformed()
        if udg_PlayHero[id].hasAbility(SPELL_MODO_Q[id]) and SPELL_MODO_Q[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_Q[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoQ[id])
                tooltip_Mode_Q(id)          

        if udg_PlayHero[id].hasAbility(SPELL_MODO_Q2[id]) and SPELL_MODO_Q2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_Q2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoQ2[id])        
                
        if udg_PlayHero[id].hasAbility(SPELL_MODO_W[id]) and SPELL_MODO_W[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_W[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoW[id])
                tooltip_Mode_W(id)        
                
        if udg_PlayHero[id].hasAbility(SPELL_MODO_W2[id]) and SPELL_MODO_W2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_W2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoW2[id])       
                
        if udg_PlayHero[id].hasAbility(SPELL_MODO_E[id]) and SPELL_MODO_E[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_E[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoE[id])     
                tooltip_Mode_E(id)    
                
        if udg_PlayHero[id].hasAbility(SPELL_MODO_E2[id]) and SPELL_MODO_E2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_E2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoE2[id])        
                
        if udg_PlayHero[id].hasAbility(SPELL_MODO_R[id]) and SPELL_MODO_R[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_R[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoR[id])     
                tooltip_Mode_R(id)
                
        if udg_PlayHero[id].hasAbility(SPELL_MODO_R2[id]) and SPELL_MODO_R2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_R2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoR2[id])       
                
        if udg_PlayHero[id].hasAbility(SPELL_MODO_T[id]) and SPELL_MODO_T[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_T[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoT[id])       
                tooltip_Mode_T(id) 
                
        if udg_PlayHero[id].hasAbility(SPELL_MODO_T2[id]) and SPELL_MODO_T2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_T2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoT2[id])         
                
        if udg_PlayHero[id].hasAbility(SPELL_MODO_F[id]) and udg_PlayHero[id].hasTagHasF() and SPELL_MODO_F[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_F[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoF[id])   

        if udg_PlayHero[id].hasAbility(SPELL_MODO_F2[id]) and udg_PlayHero[id].hasTagHasF() and SPELL_MODO_F2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_F2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoF2[id])      

        if udg_PlayHero[id].hasAbility(SPELL_MODO_G[id]) and SPELL_MODO_G[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_G[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoG[id])  
                tooltip_Mode_G(id)

        if udg_PlayHero[id].hasAbility(SPELL_MODO_G2[id]) and SPELL_MODO_G2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_MODO_G2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownModoG2[id])  

    else 
        if udg_PlayHero[id].hasAbility(SPELL_Q[id]) and SPELL_Q[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_Q[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownQ[id]) 
                if abil.isQDash()
                    tooltip_Dash_Q(id)
                else if abil.isQPoint()
                    tooltip_Point_Q(id)
                else if abil.isQTeleport()
                    tooltip_Teleport_Q(id)
                else if abil.isQProjectile()
                    tooltip_Projectile_Q(id)
                else 
                    tooltip_Q(id)      

        if udg_PlayHero[id].hasAbility(SPELL_Q2[id]) and SPELL_Q2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_Q2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownQ2[id])       
                tooltip_Q2(id)                     
                
        if udg_PlayHero[id].hasAbility(SPELL_W[id]) and SPELL_W[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_W[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownW[id])
                tooltip_W(id)     

        if udg_PlayHero[id].hasAbility(SPELL_W2[id]) and SPELL_W2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_W2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownW2[id])
                tooltip_W2(id)       
                
        if udg_PlayHero[id].hasAbility(SPELL_E[id]) and SPELL_E[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_E[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownE[id])  
                if abil.isEDamaging()
                    tooltip_Damaging_E(id)
                else
                    tooltip_E(id)        
                
        if udg_PlayHero[id].hasAbility(SPELL_E2[id]) and SPELL_E2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_E2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownE2[id])  
                tooltip_E2(id)      
                
        if udg_PlayHero[id].hasAbility(SPELL_R[id]) and SPELL_R[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_R[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownR[id])        
                tooltip_R(id)
            
        if udg_PlayHero[id].hasAbility(SPELL_R2[id]) and SPELL_R2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_R2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownR2[id])      
                tooltip_R2(id) 
            
        if udg_PlayHero[id].hasAbility(SPELL_R3[id]) and SPELL_R3[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_R3[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownR3[id])    
                tooltip_R3(id)     
                
        if udg_PlayHero[id].hasAbility(SPELL_T[id]) and SPELL_T[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_T[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownT[id])       
                if abil.isTransform()
                    tooltip_Transform_T(id)  
                else 
                    tooltip_T(id)    
                
        if udg_PlayHero[id].hasAbility(SPELL_T2[id]) and SPELL_T2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_T2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownT2[id])   
                tooltip_T2(id)
                
        if udg_PlayHero[id].hasAbility(SPELL_F[id]) and udg_PlayHero[id].hasTagHasF() and SPELL_F[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_F[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownF[id])    
                tooltip_F(id)    
                
        if udg_PlayHero[id].hasAbility(SPELL_F2[id]) and udg_PlayHero[id].hasTagHasF() and SPELL_F2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_F2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownF2[id])      
                tooltip_F2(id) 
                
        if udg_PlayHero[id].hasAbility(SPELL_F3[id]) and udg_PlayHero[id].hasTagHasF() and SPELL_F3[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_F3[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownF3[id])        
                tooltip_F3(id)
                
        if udg_PlayHero[id].hasAbility(SPELL_G[id]) and SPELL_G[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_G[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownG[id])     
                tooltip_G(id)   
                        
        if udg_PlayHero[id].hasAbility(SPELL_G2[id]) and SPELL_G2[id].hasTagDisabled() == false
            let caster = udg_PlayHero[id] 
            let abil = SPELL_G2[id]
            let lvl = GetUnitAbilityLevel(caster, abil)                      
            UnitRemoveAbility(udg_PlayHero[id], abil)
            doAfter(0.002) ->
                UnitAddAbility(udg_PlayHero[id], abil)
                SetUnitAbilityLevel(caster, abil, lvl)
                BlzStartUnitAbilityCooldown(caster, abil, acrCooldownG2[id])             
                tooltip_G2(id)              




public function acrTransformation (unit caster, real duration, int defaultSkin, int transformSkin, real barHeight, real barScale)
    let p = caster.getOwner()
    let pid = p.getId()
    transformationActive[pid] = true
    let hpbar = createUnitZ(caster.getOwner(), 'e11X', vec3(caster.getX(), caster.getY(), barHeight), angle(0))
    ..setScale(barScale)..setAnimation(100)
    BlzSetUnitSkin(caster, transformSkin)
    if caster.hasAbility(SPELL_Q[pid])
        SetPlayerAbilityAvailable(p, SPELL_Q[pid], false) 
    if caster.hasAbility(SPELL_W[pid])
        SetPlayerAbilityAvailable(p, SPELL_W[pid], false)  
    if caster.hasAbility(SPELL_E[pid])
        SetPlayerAbilityAvailable(p, SPELL_E[pid], false) 
    if caster.hasAbility(SPELL_R[pid])
        SetPlayerAbilityAvailable(p, SPELL_R[pid], false)    
    if caster.hasAbility(SPELL_T[pid])
        SetPlayerAbilityAvailable(p, SPELL_T[pid], false)
    if caster.hasAbility(SPELL_MODO_Q[pid]) == true
        SetPlayerAbilityAvailable(p, SPELL_MODO_Q[pid], true)          
    if caster.hasAbility(SPELL_MODO_Q[pid]) == false and SPELL_MODO_Q[pid] != 0
        caster.addAbility(SPELL_MODO_Q[pid])   
    if caster.hasAbility(SPELL_MODO_W[pid]) == true
        SetPlayerAbilityAvailable(p, SPELL_MODO_W[pid], true)          
    if caster.hasAbility(SPELL_MODO_W[pid]) == false and SPELL_MODO_W[pid] != 0
        caster.addAbility(SPELL_MODO_W[pid]) 
    if caster.hasAbility(SPELL_MODO_E[pid]) == true
        SetPlayerAbilityAvailable(p, SPELL_MODO_E[pid], true)          
    if caster.hasAbility(SPELL_MODO_E[pid]) == false and SPELL_MODO_E[pid] != 0
        caster.addAbility(SPELL_MODO_E[pid]) 
    if caster.hasAbility(SPELL_MODO_R[pid]) == true
        SetPlayerAbilityAvailable(p, SPELL_MODO_R[pid], true)          
    if caster.hasAbility(SPELL_MODO_R[pid]) == false and SPELL_MODO_R[pid] != 0
        caster.addAbility(SPELL_MODO_R[pid]) 
    if caster.hasAbility(SPELL_MODO_T[pid]) == true
        SetPlayerAbilityAvailable(p, SPELL_MODO_T[pid], true)          
    if caster.hasAbility(SPELL_MODO_T[pid]) == false and SPELL_MODO_T[pid] != 0
        caster.addAbility(SPELL_MODO_T[pid])      
    if caster.hasAbility(SPELL_MODO_G[pid]) == true
        SetPlayerAbilityAvailable(p, SPELL_MODO_G[pid], true)          
    if caster.hasAbility(SPELL_MODO_G[pid]) == false and SPELL_MODO_G[pid] != 0
        caster.addAbility(SPELL_MODO_G[pid])                                                                                                                 
    var durationCount = (duration * 100)
    var animationCount = 100
    var elapsedTime = 0.0
    doPeriodically(0.01) (CallbackPeriodic cb) ->
        hpbar.setPosFly(vec3(caster.getX(), caster.getY(), barHeight))
        hpbar.setAnimation(animationCount)
        // if hpbar.isAlive() == false
        //     print("hp bar: dead")
        // if hpbar.isAlive() == true
        //     print("hp bar: alive")            
        if caster.hasTagPauseEX() == false and caster.isPaused() == false
            // print(animationCount)
            elapsedTime += 0.01
            durationCount--
            animationCount = (((duration - elapsedTime) / duration) * 100).floor()
        if animationCount == 50
            DoNothing()                  
        if durationCount <= 0 or caster.isAlive() == false
            transformationActive[pid] = false
            if caster.isAlive() == false
                doAfter(5) ->                     
                    BlzSetUnitSkin(caster, defaultSkin)
            else 
                BlzSetUnitSkin(caster, defaultSkin)        
            hpbar.remove()
            if caster.hasAbility(SPELL_MODO_Q[pid]) == true
                SetPlayerAbilityAvailable(p, SPELL_MODO_Q[pid], false)
            if caster.hasAbility(SPELL_MODO_W[pid]) == true
                SetPlayerAbilityAvailable(p, SPELL_MODO_W[pid], false)
            if caster.hasAbility(SPELL_MODO_E[pid]) == true
                SetPlayerAbilityAvailable(p, SPELL_MODO_E[pid], false)
            if caster.hasAbility(SPELL_MODO_R[pid]) == true
                SetPlayerAbilityAvailable(p, SPELL_MODO_R[pid], false)
            if caster.hasAbility(SPELL_MODO_T[pid]) == true
                SetPlayerAbilityAvailable(p, SPELL_MODO_T[pid], false)
            if caster.hasAbility(SPELL_MODO_G[pid]) == true
                SetPlayerAbilityAvailable(p, SPELL_MODO_G[pid], false)                
            if caster.hasAbility(SPELL_Q[pid])
                SetPlayerAbilityAvailable(p, SPELL_Q[pid], true) 
            if caster.hasAbility(SPELL_W[pid])
                SetPlayerAbilityAvailable(p, SPELL_W[pid], true)  
            if caster.hasAbility(SPELL_E[pid])
                SetPlayerAbilityAvailable(p, SPELL_E[pid], true) 
            if caster.hasAbility(SPELL_R[pid])
                SetPlayerAbilityAvailable(p, SPELL_R[pid], true)    
            if caster.hasAbility(SPELL_T[pid])
                SetPlayerAbilityAvailable(p, SPELL_T[pid], true)
                caster.startAbilityCooldown(SPELL_T[pid])
                acrCooldownT[pid] = 60                                                    
            destroy cb



public function acrRevive(unit caster)
    let casterpos = caster.getPos()
    let p = caster.getOwner()
    let hp = caster.getHP()
    let mp = caster.getMana()
    var selected = false
    if caster.hasTagRevive() == false
        caster.addTagRevive()
    if IsUnitSelected(caster, p)
        selected = true   
    caster.setHP(0)
    doAfter(0.001) ->        
        caster.revive(casterpos, false)
        caster.setMana(mp)
        caster.setHP(hp)
        if caster.hasTagRevive() == true
            caster.removeTagRevive()
        if selected == true
            p.select(caster)

public function acrSpeedBoost(unit caster, vec2 startPoint, real distance)
    doAfter(0.1) ->                      
        new DummyCaster()
        ..owner(caster.getOwner())
        ..origin(caster.getPos())
        ..castTarget(DUMMY_ACRSPEED_ABILITY, 1, OrderIds.bloodlust, caster)
        doPeriodically(0.03) (CallbackPeriodic cb) ->
            let casterCurrentPos = caster.getPos()     
            if startPoint.distanceTo(casterCurrentPos) > distance or caster.isAlive() == false
                caster.removeAbility('B06S')
                destroy cb
                
                    