package ACR_Transformation
import AbilityGlobals
import ACR_TagSystem
import ACR_CooldownTracker
import TimerUtils

public boolean array transformationActive 
unit array hpbar
unit array user
real array duration
real array acrTransformationDurationCount
real array acrTransformationDuration
int array acrTransformationAnimationCount
real array acrTransformationElapsedTime
int array acrTransformationDefaultSkin
int array acrTransformationTransformSkin
real array acrTransformationBarHeight

function acrTransformationDeath()
    let pid = GetExpiredTimer().getData()
    BlzSetUnitSkin(user[pid], acrTransformationDefaultSkin[pid])


function acrTransformationEnd()
    let pid = GetExpiredTimer().getData()
    let p = user[pid].getOwner()
    hpbar[pid].setPosFly(vec3(user[pid].getX(), user[pid].getY(), acrTransformationBarHeight[pid]))
    hpbar[pid].setAnimation(acrTransformationAnimationCount[pid])
    // if hpbar.isAlive() == false
    //     print("hp bar: dead")
    // if hpbar.isAlive() == true
    //     print("hp bar: alive")            
    if user[pid].hasTagPauseEX() == false and user[pid].isPaused() == false
        // print(animationCount)
        acrTransformationElapsedTime[pid] += 0.01
        acrTransformationDurationCount[pid]--
        acrTransformationAnimationCount[pid] = (((acrTransformationDuration[pid] - acrTransformationElapsedTime[pid]) / acrTransformationDuration[pid]) * 100).floor()
    if acrTransformationAnimationCount[pid] == 50
        DoNothing()                  
    if acrTransformationDurationCount[pid] <= 0 or user[pid].isAlive() == false
        transformationActive[pid] = false
        if user[pid].isAlive() == false
            CreateTimer()..start(5, function acrTransformationDeath)..setData(pid)
        else 
            BlzSetUnitSkin(user[pid], acrTransformationDefaultSkin[pid])        
        hpbar[pid].remove()
        if user[pid].hasAbility(SPELL_MODO_Q[pid]) == true
            SetPlayerAbilityAvailable(p, SPELL_MODO_Q[pid], false)
        if user[pid].hasAbility(SPELL_MODO_W[pid]) == true
            SetPlayerAbilityAvailable(p, SPELL_MODO_W[pid], false)
        if user[pid].hasAbility(SPELL_MODO_E[pid]) == true
            SetPlayerAbilityAvailable(p, SPELL_MODO_E[pid], false)
        if user[pid].hasAbility(SPELL_MODO_R[pid]) == true
            SetPlayerAbilityAvailable(p, SPELL_MODO_R[pid], false)
        if user[pid].hasAbility(SPELL_MODO_T[pid]) == true
            SetPlayerAbilityAvailable(p, SPELL_MODO_T[pid], false)
        if user[pid].hasAbility(SPELL_MODO_G[pid]) == true
            SetPlayerAbilityAvailable(p, SPELL_MODO_G[pid], false)                
        if user[pid].hasAbility(SPELL_Q[pid])
            SetPlayerAbilityAvailable(p, SPELL_Q[pid], true) 
        if user[pid].hasAbility(SPELL_W[pid])
            SetPlayerAbilityAvailable(p, SPELL_W[pid], true)  
        if user[pid].hasAbility(SPELL_E[pid])
            SetPlayerAbilityAvailable(p, SPELL_E[pid], true) 
        if user[pid].hasAbility(SPELL_R[pid])
            SetPlayerAbilityAvailable(p, SPELL_R[pid], true)    
        if user[pid].hasAbility(SPELL_T[pid])
            SetPlayerAbilityAvailable(p, SPELL_T[pid], true)
            user[pid].startAbilityCooldown(SPELL_T[pid])
            acrCooldownT[pid] = 60                                                    
        GetExpiredTimer().release()

public function acrTransformation (unit caster, real duration, int defaultSkin, int transformSkin, real barHeight, real barScale)
    let pid = caster.getOwner().getId()
    user[pid] = caster
    let p = user[pid].getOwner()
    transformationActive[pid] = true
    hpbar[pid] = createUnitZ(user[pid].getOwner(), 'e11X', vec3(user[pid].getX(), user[pid].getY(), barHeight), angle(0))
    ..setScale(barScale)..setAnimation(100)
    BlzSetUnitSkin(user[pid], transformSkin)
    if user[pid].hasAbility(SPELL_Q[pid])
        SetPlayerAbilityAvailable(p, SPELL_Q[pid], false) 
    if user[pid].hasAbility(SPELL_W[pid])
        SetPlayerAbilityAvailable(p, SPELL_W[pid], false)  
    if user[pid].hasAbility(SPELL_E[pid])
        SetPlayerAbilityAvailable(p, SPELL_E[pid], false) 
    if user[pid].hasAbility(SPELL_R[pid])
        SetPlayerAbilityAvailable(p, SPELL_R[pid], false)    
    if user[pid].hasAbility(SPELL_T[pid])
        SetPlayerAbilityAvailable(p, SPELL_T[pid], false)
    if user[pid].hasAbility(SPELL_MODO_Q[pid]) == true
        SetPlayerAbilityAvailable(p, SPELL_MODO_Q[pid], true)          
    if user[pid].hasAbility(SPELL_MODO_Q[pid]) == false and SPELL_MODO_Q[pid] != 0
        user[pid].addAbility(SPELL_MODO_Q[pid])   
    if user[pid].hasAbility(SPELL_MODO_W[pid]) == true
        SetPlayerAbilityAvailable(p, SPELL_MODO_W[pid], true)          
    if user[pid].hasAbility(SPELL_MODO_W[pid]) == false and SPELL_MODO_W[pid] != 0
        user[pid].addAbility(SPELL_MODO_W[pid]) 
    if user[pid].hasAbility(SPELL_MODO_E[pid]) == true
        SetPlayerAbilityAvailable(p, SPELL_MODO_E[pid], true)          
    if user[pid].hasAbility(SPELL_MODO_E[pid]) == false and SPELL_MODO_E[pid] != 0
        user[pid].addAbility(SPELL_MODO_E[pid]) 
    if user[pid].hasAbility(SPELL_MODO_R[pid]) == true
        SetPlayerAbilityAvailable(p, SPELL_MODO_R[pid], true)          
    if user[pid].hasAbility(SPELL_MODO_R[pid]) == false and SPELL_MODO_R[pid] != 0
        user[pid].addAbility(SPELL_MODO_R[pid]) 
    if user[pid].hasAbility(SPELL_MODO_T[pid]) == true
        SetPlayerAbilityAvailable(p, SPELL_MODO_T[pid], true)          
    if user[pid].hasAbility(SPELL_MODO_T[pid]) == false and SPELL_MODO_T[pid] != 0
        user[pid].addAbility(SPELL_MODO_T[pid])      
    if user[pid].hasAbility(SPELL_MODO_G[pid]) == true
        SetPlayerAbilityAvailable(p, SPELL_MODO_G[pid], true)          
    if user[pid].hasAbility(SPELL_MODO_G[pid]) == false and SPELL_MODO_G[pid] != 0
        user[pid].addAbility(SPELL_MODO_G[pid]) 
    acrTransformationBarHeight[pid] = barHeight    
    acrTransformationDuration[pid] = duration                                                                                                                
    acrTransformationDurationCount[pid] = (duration * 100)
    acrTransformationAnimationCount[pid] = 100
    acrTransformationElapsedTime[pid] = 0.0
    acrTransformationDefaultSkin[pid] = defaultSkin
    acrTransformationTransformSkin[pid] = transformSkin
    CreateTimer()..startPeriodic(0.01, function acrTransformationEnd)..setData(pid)