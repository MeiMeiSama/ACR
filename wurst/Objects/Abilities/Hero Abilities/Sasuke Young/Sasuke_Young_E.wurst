package Sasuke_Young_E

import ClosureEvents
import ObjectDefinitions
import ClosureTimers
import UpdateTooltips
import TimerUtils
import ACR_TagSystem
import ACR_Library
init

public boolean sasukeRinneganON = true

public function sasukeYoungE()

    let sharingan_buff = 'B026'
    let rinnegan_buff = 'B00F'
    let sharingan = 'A0CX'
    let rinnegan = 'A02F'
    let mspassive = 'A189'
    let amaterasu = 'A0CY'
    let kirin = 'A02B'
    let upgrade = 'A18A'

    EventListener.add(EVENT_PLAYER_HERO_SKILL) ->
        if GetLearnedSkill() == SASUKE_YOUNG_ABILITY_E
            let u = GetTriggerUnit()
            let a = GetLearnedSkill()
            let abilvl = GetUnitAbilityLevel(u, a)
            if abilvl == 1
                u.addAbility(SASUKE_YOUNG_ABILITY_G_SHARINGAN)
                u.addAbility(sharingan)
                u.disableAbility(SASUKE_YOUNG_ABILITY_G_SHARINGAN, true, true)
                u.disableAbility(sharingan, true, true)
                SASUKE_YOUNG_ABILITY_G_SHARINGAN.addTagDisabled()
                sharingan.addTagDisabled()
                u.removeAbility(sharingan_buff)
                doAfter(0.002) ->                                       
                    u.addAbility(rinnegan)
                    u.addAbility(SASUKE_YOUNG_ABILITY_G_RINNEGAN)
                    // sasukeRinneganON = true
            u.addAbility(mspassive)
            u.setAbilityLevel(mspassive, abilvl)
            u.hideAbility(mspassive, true)

        if GetLearnedSkill() == kirin
            let u = GetTriggerUnit()
            let lvl = u.getAbilityLevel(kirin)
            u.setAbilityLevel(amaterasu, lvl)

        if GetLearnedSkill() == amaterasu
            let u = GetTriggerUnit()
            let lvl = u.getAbilityLevel(amaterasu)
            u.setAbilityLevel(kirin, lvl)    

    EventListener.onCast(SASUKE_YOUNG_ABILITY_E) (unit caster) ->
        let id = caster.getOwner().getId()

        if sasukeRinneganON == false and caster.getAbilityLevel(amaterasu) == 0
            caster.disableAbility(sharingan, true, true)
            caster.disableAbility(SASUKE_YOUNG_ABILITY_G_SHARINGAN, true, true)
            SASUKE_YOUNG_ABILITY_G_SHARINGAN.addTagDisabled()
            sharingan.addTagDisabled()
            caster.removeAbility(sharingan_buff)
            sasukeRinneganON = true
            doAfter(0.002) ->
                if caster.hasAbility(upgrade)
                    caster.removeAbility(upgrade) // removes spell B and adds spell A instead (including learning tooltip) but is bugged                           
                caster.disableAbility(rinnegan, false, false)
                caster.disableAbility(SASUKE_YOUNG_ABILITY_G_RINNEGAN, false, false)
                rinnegan.removeTagDisabled()
                SASUKE_YOUNG_ABILITY_G_RINNEGAN.removeTagDisabled()
                let tooltipTimer = CreateTimer()
                tooltipTimer..start(0.02, function updateTooltips)..setData(id)


        else if sasukeRinneganON == false and caster.getAbilityLevel(amaterasu) != 0
            let cd = caster.getAbilityCooldownRemaining(amaterasu)
            let lvl = caster.getAbilityLevel(amaterasu)
            acrCooldownR[id] = cd
            caster.disableAbility(sharingan, true, true)
            caster.disableAbility(SASUKE_YOUNG_ABILITY_G_SHARINGAN, true, true)
            sharingan.addTagDisabled()
            SASUKE_YOUNG_ABILITY_G_SHARINGAN.addTagDisabled()
            caster.removeAbility(sharingan_buff)    
            if caster.hasAbility(upgrade)
                caster.removeAbility(upgrade) // removes spell B and adds spell A instead (including learning tooltip) but is bugged    
            caster.removeAbility(kirin) // to fix the bug, remove spell A
            sasukeRinneganON = true
            doAfter(0.002) ->
                caster.addAbility(kirin)// and add it back again shortly after
                caster.setAbilityLevel(kirin, lvl)
                caster.startAbilityCooldown(kirin, cd)                              
                caster.disableAbility(rinnegan, false, false)
                caster.disableAbility(SASUKE_YOUNG_ABILITY_G_RINNEGAN, false, false)
                rinnegan.removeTagDisabled()
                SASUKE_YOUNG_ABILITY_G_RINNEGAN.removeTagDisabled()
                let tooltipTimer = CreateTimer()
                tooltipTimer..start(0.02, function updateTooltips)..setData(id)

        else if sasukeRinneganON == true and caster.getAbilityLevel(kirin) == 0
            caster.disableAbility(rinnegan, true, true)
            caster.disableAbility(SASUKE_YOUNG_ABILITY_G_RINNEGAN, true, true)
            rinnegan.addTagDisabled()
            SASUKE_YOUNG_ABILITY_G_RINNEGAN.addTagDisabled()
            caster.removeAbility(rinnegan_buff)   
            sasukeRinneganON = false
            doAfter(0.002) ->
                caster.addAbility(upgrade) // removes spell A and adds spell B instead (including learning tooltip) but is bugged                                           
                caster.disableAbility(sharingan, false, false)
                caster.disableAbility(SASUKE_YOUNG_ABILITY_G_SHARINGAN, false, false)
                sharingan.removeTagDisabled()
                SASUKE_YOUNG_ABILITY_G_SHARINGAN.removeTagDisabled()
                let tooltipTimer = CreateTimer()
                tooltipTimer..start(0.02, function updateTooltips)..setData(id)                
                      

        else if sasukeRinneganON == true and caster.getAbilityLevel(kirin) != 0
            let cd = caster.getAbilityCooldownRemaining(kirin)
            let lvl = caster.getAbilityLevel(kirin)
            acrCooldownR2[id] = cd
            caster.disableAbility(rinnegan, true, true)
            caster.disableAbility(SASUKE_YOUNG_ABILITY_G_RINNEGAN, true, true)
            rinnegan.addTagDisabled()
            SASUKE_YOUNG_ABILITY_G_RINNEGAN.addTagDisabled()
            caster.removeAbility(rinnegan_buff)
            caster.addAbility(upgrade) // removes spell A and adds spell B instead (including learning tooltip) but is bugged
            caster.removeAbility(amaterasu) // to fix the bug, remove spell B    
            sasukeRinneganON = false
            doAfter(0.002) ->
                caster.addAbility(amaterasu) // and add it back again shortly after
                caster.setAbilityLevel(amaterasu, lvl)
                caster.startAbilityCooldown(amaterasu, cd)                                                   
                caster.disableAbility(sharingan, false, false)
                caster.disableAbility(SASUKE_YOUNG_ABILITY_G_SHARINGAN, false, false)
                sharingan.removeTagDisabled()
                SASUKE_YOUNG_ABILITY_G_SHARINGAN.removeTagDisabled()
                let tooltipTimer = CreateTimer()
                tooltipTimer..start(0.02, function updateTooltips)..setData(id)

