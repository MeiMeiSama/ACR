package SaberStrength_G

import ClosureEvents
import AbilityClassifications
import AbilityGlobals
import ObjectDefinitions

unit saberStr
int healing_amount
int saberStrGCount
real healing_HoT

function saberStrGTranslation()
    if healing_amount > 0
        let skill = ARTURIA_STRENGTH_ABILITY_G
        skill..setDescription(skill,
        GOLD+
        "Whenever Lily receives damage from a basic attack, she heals back a portion of that damage over the next few seconds."+
        "\n\nDuration: "+PINK+"4"+GOLD+
        "\nDamage Healed: "+PINK+"50%"+GOLD+
        "\nCurrent Healing Stored: "+PINK+healing_amount.toString()+GOLD)
    else 
        let skill = ARTURIA_STRENGTH_ABILITY_G
        skill..setDescription(skill,
        GOLD+
        "Whenever Lily receives damage from a basic attack, she heals back a portion of that damage over the next few seconds."+
        "\n\nDuration: "+PINK+"4"+GOLD+
        "\nDamage Healed: "+PINK+"50%"+GOLD+
        "\nCurrent Healing Stored: "+PINK+"0"+GOLD)  
        GetExpiredTimer().destr()   

function saberStrGheal()
    flashEffect("HealBuff.mdx", saberStr, "origin")
    print("healing left: "+healing_amount.toString())
    print("healed for: "+healing_HoT.toString())
    saberStr.addHP(healing_HoT)
    healing_amount -= (healing_HoT).toInt()    
    if saberStr.isAlive() == false
        healing_amount = 0  
    if healing_amount <= 0 
        GetExpiredTimer().destr()           


public function saberStrG()
    EventListener.add(EVENT_PLAYER_UNIT_DAMAGED) -> 
        if BlzGetEventDamageTarget().getTypeId() == ARTURIA_STRENGTH and BlzGetEventAttackType() == ATTACK_TYPE_HERO

            // ━━━━━━━━━━━━ [Variables] ━━━━━━━━━━━━
            
            saberStr = BlzGetEventDamageTarget()
            var dmgAmount = GetEventDamage().floor()
            if not dmgAmount.isEven()
                dmgAmount++
            dmgAmount = (dmgAmount / 2).floor()

            healing_amount += dmgAmount
            healing_HoT = (healing_amount / 4)
            saberStrGCount = 0
            CreateTimer()..startPeriodic(0.1, function saberStrGTranslation)
            CreateTimer()..startPeriodic(1, function saberStrGheal)  