package Dio_W

import DamageEvent
import AbilityGlobals
import ObjectDefinitions
import UpdateTooltips
import TimerUtils
import ChannelAbilityPreset
import UnitIds
import ClosureForGroups
import ACR_Pull
import ACR_TagSystem
import ACR_Stun
import main

unit dio
unit zaWarudo
unit dioWTarget
bool dioWBool
timer dioWTimer
int dioWTimerInt1
int dioWTimerInt2
int dioWTimerInt3
int dioWLvl
vec2 abilitydioWPos
vec2 zaWarudoPos

@compiletime function createAbility()
    new ChannelAbilityPreset(DIO_W, 5, true)
        ..presetTargetTypes(Targettype.NONE)
        ..setAnimationNames("11111111")
        ..setButtonPositionNormalX(1)
        ..setButtonPositionNormalY(2)
        ..setButtonPositionResearchX(1)
        ..setButtonPositionResearchY(0)
        ..setIconNormal("ReplaceableTextures\\PassiveButtons\\PASBTNFireRocks.blp")
        ..setIconResearch("ReplaceableTextures\\PassiveButtons\\PASBTNFireRocks.blp")
        ..setMissileSpeed(99999)
        ..setHeroAbility(true)
        ..setHotkeyNormal("W")
        ..setHotkeyLearn("W")
        ..setLevels(5)
        ..setLevelSkipRequirement(2)
        ..presetArtDuration(lvl -> 0)
        ..presetBaseOrderID(lvl -> "possession")
        ..presetDisableOtherAbilities(lvl -> false)
        ..presetFollowThroughTime(lvl -> 0)
        ..presetCastRange(lvl -> 2000)
        ..presetCooldown(lvl -> 50)
        ..presetManaCost(lvl -> 70)
        ..presetTargetsAllowed(lvl -> "enemy,ground,air,neutral")
        ..presetTooltipNormal(lvl -> "Howl of the Illusory Wolf|r")
        ..presetTooltipNormalExtended(lvl -> "dio W Desc|r")
        ..setTooltipLearn("Learn W|r")
        ..setTooltipLearnExtended("Learning W|r")    
    new UnitDefinition(DIO_W_DUMMY, UnitIds.wisp)
        ..setNormalAbilities(commaList('Avul', 'Aloc', 'Amrf'))
        ..setAnimationCastBackswing(0)
        ..setDeathTimeseconds(0.1)
        ..setScalingValue(0.70)
        ..setUnitClassification("_")
        ..setArtSpecial("_")
        ..setHasWaterShadow(false)
        ..setMaximumPitchAngledegrees(0)
        ..setMaximumRollAngledegrees(0)
        ..setModelFile("war3mapImported\\Shio_Dio_The_World.mdx")
        ..setScalingValue(1.5)
        ..setArtSpecial("_")
        ..setArmorType(ArmorType.Unarmored)
        ..setPlaceableInEditor(false)
        ..setMovementHeight(20)
        ..setSpeedBase(100)
        ..setTurnRate(3)
        ..setMovementType(MovementType.Fly)
        ..setCollisionSize(0)
        ..setUnitSoundSet("_")
        ..setCanFlee(false)
        ..setFoodCost(0)
        ..setHideMinimapDisplay(true)
        ..setHitPointsMaximumBase(60)
        ..setHitPointsRegenerationRate(-1)
        ..setHitPointsRegenerationType("Always")
        ..setStockMaximum(1)
        ..setStockReplenishInterval(1)
        ..setStructuresBuilt("_")
        ..setUpgradesUsed("_")
        ..setHotkey("_")
        ..setName("effect dummy")
        ..setTooltipBasic("_")
        ..setTooltipExtended("_")

init
    dioW()    

function dioW()
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT)
    ..addAction() ->
        if GetSpellAbilityId() == DIO_W
            abilitydioWPos = vec2(GetSpellTargetX(), GetSpellTargetY())
            dio = GetTriggerUnit()
            dio.pause()
            dio.setInvulnerable(true)    
            zaWarudo = createUnit(DIO_W_DUMMY, dio.getPos())     
            zaWarudo.setAnimation(9)
            zaWarudo.setFacing(zaWarudo.getPos().angleTo(abilitydioWPos))              
            dioWTimerInt1 = 0                          
            dioWTimer = CreateTimer()..startPeriodic(0.01, function dioWStart)   

function dioWStart()
    dioWTimerInt1++
    if dioWTimerInt1 == 5
        forNearestUnit(dio.getPos(), 600, Filter(function dioWFilter)) (unit u) ->
            if u != null
                dioWTimer.destr()
                print("1")
                dio.unpause()
                dio.setInvulnerable(false)                  
            else 
                dioWTimer.destr()
                print("2")            
                dio.unpause()
                dio.setInvulnerable(false)        

function dioWFilter() returns boolean
    return GetFilterUnit().isType(UNIT_TYPE_HERO)==true and GetFilterUnit().isEnemyOf(dio)==true and GetFilterUnit().isAlive()==true and GetFilterUnit().isInvulnerable()== false  

