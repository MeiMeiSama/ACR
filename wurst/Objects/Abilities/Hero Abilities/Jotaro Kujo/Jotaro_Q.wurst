package Jotaro_Q

import DamageEvent
import AbilityGlobals
import ObjectDefinitions
import ChannelAbilityPreset
import UnitIds
import ClosureForGroups
import main
//import ClosureTimers

unit jotaro
unit starPlatinum
unit laser
unit array jotaroQDummy
group jotaroQGroup
timer jotaroQTimer
int jotaroQTimerInt
vec2 abilityJotaroQPos
vec2 jotaroPos
effect sfx

@compiletime function createAbility()
    new ChannelAbilityPreset(JOTARO_Q, 5, true)
        ..presetTargetTypes(Targettype.POINTUNIT)
        ..setAnimationNames("11111111")
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..setButtonPositionResearchX(0)
        ..setButtonPositionResearchY(0)
        ..setIconNormal("ReplaceableTextures\\CommandButtons\\BTNGolemThunderclap.blp")
        ..setIconResearch("ReplaceableTextures\\CommandButtons\\BTNGolemThunderclap.blp")
        ..setMissileSpeed(99999)
        ..setHeroAbility(true)
        ..setHotkeyNormal("Q")
        ..setHotkeyLearn("Q")
        ..setLevels(5)
        ..setLevelSkipRequirement(2)
        ..presetArtDuration(lvl -> 0)
        ..presetBaseOrderID(lvl -> "auravampiric")
        ..presetDisableOtherAbilities(lvl -> false)
        ..presetFollowThroughTime(lvl -> 0)
        ..presetCastRange(lvl -> 2000)
        ..presetCooldown(lvl -> 50)
        ..presetManaCost(lvl -> 70)
        ..presetTargetsAllowed(lvl -> "enemy,ground,air,neutral")
        ..presetTooltipNormal(lvl -> "Star Finger|r")
        ..presetTooltipNormalExtended(lvl -> "Jotaro Q Desc|r")
        ..setTooltipLearn("Learn Q|r")
        ..setTooltipLearnExtended("Learning Q|r")           
    new UnitDefinition(JOTARO_Q_DUMMY, UnitIds.wisp)
        ..setNormalAbilities(commaList('Avul', 'Aloc', 'Amrf'))
        ..setAnimationCastBackswing(0)
        ..setDeathTimeseconds(0.1)
        ..setScalingValue(0.70)
        ..setUnitClassification("_")
        ..setArtSpecial("_")
        ..setHasWaterShadow(false)
        ..setMaximumPitchAngledegrees(0)
        ..setMaximumRollAngledegrees(0)
        ..setModelFile("_") //Star Platinum //DioLaser //starfinger
        ..setScalingValue(1.0)
        ..setArtSpecial("_")
        ..setArmorType(ArmorType.Unarmored)
        ..setPlaceableInEditor(false)
        ..setMovementHeight(20)
        ..setSpeedBase(522)
        ..setTurnRate(3)
        ..setMovementType(MovementType.Fly)
        ..setCollisionSize(0)
        ..setUnitSoundSet("_")
        ..setCanFlee(false)
        ..setFoodCost(0)
        ..setHideMinimapDisplay(true)
        ..setHitPointsMaximumBase(60)
        ..setHitPointsRegenerationRate(-1)
        ..setHitPointsRegenerationType("Always")
        ..setStockMaximum(1)
        ..setStockReplenishInterval(1)
        ..setStructuresBuilt("_")
        ..setUpgradesUsed("_")
        ..setHotkey("_")
        ..setName("effect dummy")
        ..setTooltipBasic("_")
        ..setTooltipExtended("_")

    new UnitDefinition(JOTARO_Q_DUMMY2, UnitIds.wisp)
        ..setNormalAbilities(commaList('Avul', 'Aloc', 'Amrf'))
        ..setAnimationCastBackswing(0)
        ..setDeathTimeseconds(0.1)
        ..setScalingValue(0.70)
        ..setUnitClassification("_")
        ..setArtSpecial("_")
        ..setHasWaterShadow(false)
        ..setMaximumPitchAngledegrees(0)
        ..setMaximumRollAngledegrees(0)
        ..setModelFile("war3mapImported\\Star Platinum.mdx")
        ..setScalingValue(1.5)
        ..setArtSpecial("_")
        ..setArmorType(ArmorType.Unarmored)
        ..setPlaceableInEditor(false)
        ..setMovementHeight(20)
        ..setSpeedBase(100)
        ..setTurnRate(3)
        ..setMovementType(MovementType.Fly)
        ..setCollisionSize(0)
        ..setUnitSoundSet("_")
        ..setCanFlee(false)
        ..setFoodCost(0)
        ..setHideMinimapDisplay(true)
        ..setHitPointsMaximumBase(60)
        ..setHitPointsRegenerationRate(-1)
        ..setHitPointsRegenerationType("Always")
        ..setStockMaximum(1)
        ..setStockReplenishInterval(1)
        ..setStructuresBuilt("_")
        ..setUpgradesUsed("_")
        ..setHotkey("_")
        ..setName("effect dummy")
        ..setTooltipBasic("_")
        ..setTooltipExtended("_")
    new UnitDefinition(JOTARO_Q_DUMMY3, UnitIds.wisp)
        ..setNormalAbilities(commaList('Avul', 'Aloc', 'Amrf'))
        ..setAnimationCastBackswing(0)
        ..setDeathTimeseconds(0.1)
        ..setScalingValue(0.70)
        ..setUnitClassification("_")
        ..setArtSpecial("_")
        ..setHasWaterShadow(false)
        ..setMaximumPitchAngledegrees(0)
        ..setMaximumRollAngledegrees(0)
        ..setModelFile("war3mapImported\\starfinger.mdx")
        ..setScalingValue(1.5)
        ..setArtSpecial("_")
        ..setArmorType(ArmorType.Unarmored)
        ..setPlaceableInEditor(false)
        ..setMovementHeight(20)
        ..setSpeedBase(100)
        ..setTurnRate(3)
        ..setMovementType(MovementType.Fly)
        ..setCollisionSize(0)
        ..setUnitSoundSet("_")
        ..setCanFlee(false)
        ..setFoodCost(0)
        ..setHideMinimapDisplay(true)
        ..setHitPointsMaximumBase(60)
        ..setHitPointsRegenerationRate(-1)
        ..setHitPointsRegenerationType("Always")
        ..setStockMaximum(1)
        ..setStockReplenishInterval(1)
        ..setStructuresBuilt("_")
        ..setUpgradesUsed("_")
        ..setHotkey("_")
        ..setName("effect dummy")
        ..setTooltipBasic("_")
        ..setTooltipExtended("_")    

init
    jotaroQ()    

function jotaroQ()
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT)
    ..addAction() ->
        if GetSpellAbilityId() == JOTARO_Q
            gg_snd_jotaroQ.play()
            abilityJotaroQPos = vec2(GetSpellTargetX(), GetSpellTargetY())
            jotaro = GetTriggerUnit()
            jotaroPos = jotaro.getPos()
            if jotaro.getPos().distanceTo(abilityJotaroQPos) < 1500
                abilityJotaroQPos = jotaro.getPos().polarOffset(jotaro.getPos().angleTo(abilityJotaroQPos), 1500)
            starPlatinum = createUnit(jotaro.getOwner(), JOTARO_Q_DUMMY2, jotaroPos.polarOffset(jotaroPos.angleTo(abilityJotaroQPos), 150), jotaro.getPos().angleTo(abilityJotaroQPos))
            starPlatinum.setTimeScale(3.5)
            starPlatinum.setAnimation(2)
            jotaroQTimerInt = 0
            if jotaroQGroup == null
                jotaroQGroup = CreateGroup()            
            jotaroQTimer = CreateTimer()..startPeriodic(0.01, function jotaroQStart)

function jotaroQStart()
    jotaroQTimerInt++
    // Yone Code Start --------------------------------------------------------------------------------------------------------------------------
    // I recommend learning to use "effect" for effects instead of units. Using units is ancient technique, ever since we got reforged it is no longer necessary. Read code below for demonstration
    // Unit is also less friendly on FPS, whereas effects have almost no impact on performance when compared to spawning multiple units instead
    // Another benefit is that effects dont behave like a unit, and no dummy is required. For example a unit can not go through boundary, making the dummy_effect look weird but effect instead of unit will be able to.
    // Of course, you can find workarounds for this like giving locust to dummy unit, but there is also issues with cliffs and other things. I recommend learning effects, they are superior when it comes to  handling effects.

   // effect sfx = null
   // if jotaroQTimerInt == 3
     //   sfx = addEffect("war3mapImported\\starfinger.mdx", starPlatinum.getPos().polarOffset(starPlatinum.getPos().angleTo(abilityJotaroQPos), 1000))
     //   sfx
     //   ..setYaw(starPlatinum.getPos().angleTo(abilityJotaroQPos))
     //   ..setScale(vec3(50, 10, 5))
     //   ..setZ(450)
     //   ..setTime(0.50) // I can't get setTime to work properly, maybe its bugged? Not sure, so I used doAfter and removed it
     //   ..playAnimation(ANIM_TYPE_STAND)
     //   sfx.getPos().add(25, 0)
     //   doAfter(0.5) ->
     //       sfx.setX(-999999) // Sometimes when destroying an effect there is a delay (to give it time to play death animation)
     //      sfx.setY(-999999) // Laser has only "STAND" animation but it does nothing, so for us useless. We move effect away from everyone's eye, giving the impression it disappeared instantly.
     //       sfx.destr()       // And destroy it, so it does not leak

    // Yaw: This changes the direction it should look at / face at
    // Pitch: How much it should look up/down, like when a plane is about to lift, it has to increase its pitch to look up to fly
    // Roll: If you want the plane to fly upside down, you would change Roll, so this "rotates" on the object itself
    // Plane Image Demonstration: https://upload.wikimedia.org/wikipedia/commons/c/c1/Yaw_Axis_Corrected.svg

    // Animation: Effects don't use animations like units "integer 1" or "string name", they mostly use ANIMTYPEs. For example, Laser animation has STAND. So for us, we would play STAND like this: sfx.playAnimation(ANIM_TYPE_STAND)
    // Animation: See https://i.imgur.com/FxL1jDC.png for all the ANIMTYPEs, can also find them in common.j

    // Yone Code End --------------------------------------------------------------------------------------------------------------------------
    
    if jotaroQTimerInt == 10
        //laser = createUnit(jotaro.getOwner(), JOTARO_Q_DUMMY3, starPlatinum.getPos().polarOffset(starPlatinum.getPos().angleTo(abilityJotaroQPos), 800), starPlatinum.getPos().angleTo(abilityJotaroQPos))
        //SetUnitScale(laser, 30.0, 10.0, 10.0)
        //laser.setFlyHeight(300, 0)
        //laser.setTimedLife(0.50)
        sfx = addEffect("war3mapImported\\starfinger.mdx", starPlatinum.getPos().polarOffset(starPlatinum.getPos().angleTo(abilityJotaroQPos), 800))
        ..setYaw(starPlatinum.getPos().angleTo(abilityJotaroQPos))
        ..setScale(vec3(30, 70, 10))    
    if jotaroQTimerInt == 12
        for i = 3 to 12
            jotaroQDummy[i] = createUnit(jotaro.getOwner(), JOTARO_Q_DUMMY, jotaroPos.polarOffset(jotaroPos.angleTo(abilityJotaroQPos), (100.0 * i)) , jotaroPos.angleTo(abilityJotaroQPos))  
            SetUnitScale(jotaroQDummy[i], 10.0, 3.0, 1.0)
            jotaroQDummy[i].setFlyHeight(300, 0)
            forUnitsInRange(jotaroQDummy[i].getPos(), 300) (unit u) ->
                if jotaro.isAllyOf(u) == false and u.isInvulnerable() == false and jotaroQGroup.has(u) == false
                    DamageEvent.setNextDamageId(DAMAGE_ABILITY_Q)
                    DamageEvent.setNextDamageFromCode()
                    jotaro.damageTarget(u, 1, ATTACK_TYPE_MAGIC) 
                    jotaroQGroup.add(u)                      
    if jotaroQTimerInt >= 40
        sfx.setX(-999999)
        sfx.setY(-999999)
        sfx.destr()
        starPlatinum.kill()
        for i = 3 to 12
            jotaroQDummy[i].kill()
            jotaroQTimer.destr()
            jotaroQGroup.clear() 