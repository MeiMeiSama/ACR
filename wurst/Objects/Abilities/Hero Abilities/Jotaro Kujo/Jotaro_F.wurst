package Jotaro_F

import AbilityGlobals
import ObjectDefinitions
import ChannelAbilityPreset
import UnitIds
import ACR_TagSystem
import DamageEvent
import BuffObjEditing
import DummyCaster
import OrderIds
import main
import TerrainUtils

unit jotaro
unit jotaroFTarget
unit starPlatinum
unit jotaroFDummy
unit jotaroFInvisibleDummy
unit harpoon
// unit jotaroFDummy2
vec2 jotaroPos
int jotaroFInt
int jotaroFProcInt
timer jotaroFTimer
timer jotaroFProcTimer

@compiletime function createAbility()
    new ChannelAbilityPreset(JOTARO_F, 1, true)
        ..presetTargetTypes(Targettype.NONE)
        ..setAnimationNames("11111")
        ..setButtonPositionNormalX(2)
        ..setButtonPositionNormalY(1)
        ..setButtonPositionResearchX(1)
        ..setButtonPositionResearchY(1)
        ..setIconNormal("ReplaceableTextures\\CommandButtons\\BTNInvisibility.blp")
        ..setIconResearch("ReplaceableTextures\\CommandButtons\\BTNInvisibility.blp")
        ..setMissileSpeed(99999)
        ..setHeroAbility(true)
        ..setHotkeyNormal("F")
        ..setHotkeyLearn("F")
        ..setLevels(1)
        ..presetArtDuration(lvl -> 0)
        ..presetBaseOrderID(lvl -> "tranquility")
        ..presetDisableOtherAbilities(lvl -> false)
        ..presetFollowThroughTime(lvl -> 0)
        ..presetCastRange(lvl -> 2000)
        ..presetCooldown(lvl -> 50)
        ..presetManaCost(lvl -> 70)
        ..presetTargetsAllowed(lvl -> "enemy,ground,air,neutral")
        ..presetTooltipNormal(lvl -> "Star Platinum: Counter|r")
        ..presetTooltipNormalExtended(lvl -> "Misogi F Desc|r")
        ..setTooltipLearn("Star Platinum: Counter|r")
        ..setTooltipLearnExtended("Learning F|r")    

    new UnitDefinition(JOTARO_F_DUMMY, UnitIds.wisp)
        ..setNormalAbilities(commaList('Avul', 'Aloc', 'Amrf'))
        ..setAnimationCastBackswing(0)
        ..setDeathTimeseconds(0.1)
        ..setScalingValue(0.70)
        ..setUnitClassification("_")
        ..setArtSpecial("_")
        ..setHasWaterShadow(false)
        ..setMaximumPitchAngledegrees(0)
        ..setMaximumRollAngledegrees(0)
        ..setModelFile("war3mapImported\\FieldPuRPle.mdl")
        ..setScalingValue(2.5)
        ..setArtSpecial("_")
        ..setArmorType(ArmorType.Unarmored)
        ..setPlaceableInEditor(false)
        ..setMovementHeight(20)
        ..setSpeedBase(100)
        ..setTurnRate(3)
        ..setMovementType(MovementType.Fly)
        ..setCollisionSize(0)
        ..setUnitSoundSet("_")
        ..setCanFlee(false)
        ..setFoodCost(0)
        ..setHideMinimapDisplay(true)
        ..setHitPointsMaximumBase(60)
        ..setHitPointsRegenerationRate(-1)
        ..setHitPointsRegenerationType("Always")
        ..setStockMaximum(1)
        ..setStockReplenishInterval(1)
        ..setStructuresBuilt("_")
        ..setUpgradesUsed("_")
        ..setHotkey("_")
        ..setName("effect dummy")
        ..setTooltipBasic("_")
        ..setTooltipExtended("_")

    new UnitDefinition(JOTARO_F_DUMMY2, UnitIds.wisp)
        ..setNormalAbilities(commaList('Avul', 'Aloc', 'Amrf'))
        ..setAnimationCastBackswing(0)
        ..setDeathTimeseconds(0.1)
        ..setScalingValue(0.70)
        ..setUnitClassification("_")
        ..setArtSpecial("_")
        ..setHasWaterShadow(false)
        ..setMaximumPitchAngledegrees(0)
        ..setMaximumRollAngledegrees(0)
        ..setModelFile("war3mapImported\\Star Platinum.mdx")
        ..setScalingValue(1.5)
        ..setArtSpecial("_")
        ..setArmorType(ArmorType.Unarmored)
        ..setPlaceableInEditor(false)
        ..setMovementHeight(20)
        ..setSpeedBase(100)
        ..setTurnRate(3)
        ..setMovementType(MovementType.Fly)
        ..setCollisionSize(0)
        ..setUnitSoundSet("_")
        ..setCanFlee(false)
        ..setFoodCost(0)
        ..setHideMinimapDisplay(true)
        ..setHitPointsMaximumBase(60)
        ..setHitPointsRegenerationRate(-1)
        ..setHitPointsRegenerationType("Always")
        ..setStockMaximum(1)
        ..setStockReplenishInterval(1)
        ..setStructuresBuilt("_")
        ..setUpgradesUsed("_")
        ..setHotkey("_")
        ..setName("effect dummy")
        ..setTooltipBasic("_")
        ..setTooltipExtended("_")
    new UnitDefinition(JOTARO_F_DUMMY3, UnitIds.wisp)
        ..setNormalAbilities(commaList('Avul', 'Aloc', 'Amrf'))
        ..setAnimationCastBackswing(0)
        ..setDeathTimeseconds(0.1)
        ..setScalingValue(0.25)
        ..setUnitClassification("_")
        ..setArtSpecial("_")
        ..setHasWaterShadow(false)
        ..setMaximumPitchAngledegrees(0)
        ..setMaximumRollAngledegrees(0)
        ..setModelFile("war3mapImported\\Harpoon.mdx")
        ..setArtSpecial("_")
        ..setArmorType(ArmorType.Unarmored)
        ..setPlaceableInEditor(false)
        ..setMovementHeight(20)
        ..setSpeedBase(100)
        ..setTurnRate(3)
        ..setMovementType(MovementType.Fly)
        ..setCollisionSize(0)
        ..setUnitSoundSet("_")
        ..setCanFlee(false)
        ..setFoodCost(0)
        ..setHideMinimapDisplay(true)
        ..setHitPointsMaximumBase(60)
        ..setHitPointsRegenerationRate(-1)
        ..setHitPointsRegenerationType("Always")
        ..setStockMaximum(1)
        ..setStockReplenishInterval(1)
        ..setStructuresBuilt("_")
        ..setUpgradesUsed("_")
        ..setHotkey("_")
        ..setName("effect dummy")
        ..setTooltipBasic("_")
        ..setTooltipExtended("_")
    // new UnitDefinition(JOTARO_F_DUMMY3, UnitIds.wisp)
    //     ..setNormalAbilities(commaList('Avul', 'Aloc', 'Amrf'))
    //     ..setAnimationCastBackswing(0)
    //     ..setDeathTimeseconds(0.1)
    //     ..setScalingValue(0.01)
    //     ..setUnitClassification("_")
    //     ..setArtSpecial("_")
    //     ..setHasWaterShadow(false)
    //     ..setMaximumPitchAngledegrees(0)
    //     ..setMaximumRollAngledegrees(0)
    //     ..setModelFile("_")
    //     ..setScalingValue(1.5)
    //     ..setArtSpecial("_")
    //     ..setArmorType(ArmorType.Unarmored)
    //     ..setPlaceableInEditor(false)
    //     ..setMovementHeight(20)
    //     ..setSpeedBase(100)
    //     ..setTurnRate(3)
    //     ..setMovementType(MovementType.Fly)
    //     ..setCollisionSize(0)
    //     ..setUnitSoundSet("_")
    //     ..setCanFlee(false)
    //     ..setFoodCost(0)
    //     ..setHideMinimapDisplay(true)
    //     ..setHitPointsMaximumBase(60)
    //     ..setHitPointsRegenerationRate(-1)
    //     ..setHitPointsRegenerationType("Always")
    //     ..setStockMaximum(1)
    //     ..setStockReplenishInterval(1)
    //     ..setStructuresBuilt("_")
    //     ..setUpgradesUsed("_")
    //     ..setHotkey("_")
    //     ..setName("effect dummy")
    //     ..setTooltipBasic("_")
    //     ..setTooltipExtended("_")        

    new BuffDefinition(JOTARO_F_BUFF, AbilityIds.innerFire)
        ..setName(1, "Za Warudo Counter")
        ..setTooltipNormal(1, "Za Warudo Counter")
        ..setTooltipNormalExtended(1, "Counters the next incoming damage")
        ..setIcon("ReplaceableTextures\\CommandButtons\\BTNYuuki.blp")
        ..setIconNormal(1, "ReplaceableTextures\\CommandButtons\\BTNYuuki.blp")

    new AbilityDefinitionBloodlust(JOTARO_F_DUMMY_ABILITY)
        ..setLevels(1)
        ..setManaCost(1, 0)
        ..setScalingFactor(1, 0)
        ..setCastRange(1, 99999)
        ..setCastingTime(1, 0)
        ..setDurationHero(1, 9999)
        ..setDurationNormal(1, 9999)
        ..setMovementSpeedIncrease(1, 0)
        ..setAttackSpeedIncrease(1, 0)
        ..setCooldown(1, 0.01)
        ..setTargetsAllowed(1, "Friend, Invulnerable, Vulnerable")
        ..setRequirements("")
        ..setBuffs(1, commaList(JOTARO_F_BUFF))
        ..setIconNormal("ReplaceableTextures\\CommandButtons\\BTNYuuki.blp")
        ..setArtTarget("_")
        ..setTargetAttachmentPoint("chest")
        ..setTargetAttachmentPoint1("chest")
        ..setName("Za Warudo Counter Dummy")
        ..setTooltipNormal(1, "Za Warudo Counter Dummy|r")
        ..setTooltipNormalExtended(1, "Za Warudo Counter Dummy|r")   


init
    jotaroF()    

function jotaroF()
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT)
    ..addAction() ->
        if GetSpellAbilityId() == JOTARO_F
            jotaro = GetTriggerUnit()
            jotaroFInt = 0
            if JOTARO_F.hasTagDisabled() == false
                jotaro.disableAbility(JOTARO_F, true, false)
                JOTARO_F.addTagDisabled()        
            new DummyCaster()
            ..owner(jotaro.getOwner())
            ..origin(jotaro.getPos())
            ..castTarget(JOTARO_F_DUMMY_ABILITY, 1, OrderIds.bloodlust, jotaro)                
            jotaroFTimer = CreateTimer()..startPeriodic(0.03, function jotaroFStart)  
          

function jotaroFStart()
    if jotaro.isPaused() == false
        jotaroFInt++
    if jotaro.hasAbility(JOTARO_F_BUFF) == false
        jotaroFTimer.destr() 
        if JOTARO_F.hasTagDisabled() == true
            jotaro.disableAbility(JOTARO_F, false, false)
            JOTARO_F.removeTagDisabled()
        jotaro.startAbilityCooldown(JOTARO_F) 

    if jotaroFInt == 100
        jotaroFTimer.destr()
        jotaro.removeAbility(JOTARO_F_BUFF)
        if JOTARO_F.hasTagDisabled() == true
            jotaro.disableAbility(JOTARO_F, false, false)
            JOTARO_F.removeTagDisabled()
        jotaro.startAbilityCooldown(JOTARO_F)

public function jotaroFProc(unit procUnit)
    jotaroFTarget = procUnit
    jotaroFProcInt = 0
    jotaroFTarget.pause()
    jotaroFTarget.setInvulnerable(true)
    jotaro.pause()
    jotaro.setInvulnerable(true)
    jotaro.setPathing(false)
    gg_snd_jotaroF1.play()
    jotaroFDummy = createUnit(JOTARO_F_DUMMY, jotaroFTarget.getPos())
    jotaroFProcTimer = CreateTimer()..startPeriodic(0.01, function jotaroFProcStart)  

function jotaroFProcStart()
    // let rng = GetRandomInt(0, 1)
    // if rng == 0 
    jotaroFProcInt++
    if jotaroFTarget.isPaused() == false 
        jotaroFTarget.pause()
    if jotaroFTarget.isInvulnerable() == false
        jotaroFTarget.setInvulnerable(true)    
    if jotaro.isPaused() == false
        jotaro.pause()
    if jotaro.isInvulnerable() == false
        jotaro.setInvulnerable(true) 
    if jotaroFProcInt == 1
        jotaro.setPos(jotaroFTarget.getPos().polarOffset(jotaroFTarget.getPos().angleTo(jotaro.getPos()), -350))  // is this where he walks
        jotaro.setFacing(jotaro.getPos().angleTo(jotaroFTarget.getPos()) + angle(PI)) 
        harpoon = createUnit(jotaro.getOwner(), JOTARO_F_DUMMY3, jotaroFTarget.getPos().polarOffset(jotaroFTarget.getPos().angleTo(jotaro.getPos()) + angle(15), -800), DOWN.getAngle())
        harpoon.setFlyHeight(100, 0)        
    if jotaroFProcInt == 575
        starPlatinum = createUnit(jotaro.getOwner(), JOTARO_F_DUMMY2, harpoon.getPos().polarOffset(jotaro.getPos().angleTo(jotaroFTarget.getPos()), -50), harpoon.getPos().angleTo(jotaroFTarget.getPos()))
    if jotaroFProcInt == 600
        starPlatinum.setAnimation(11)
        harpoon.setFlyHeight(300, 0)
        harpoon.setFacing(harpoon.getPos().angleTo(jotaroFTarget.getPos()))
    if jotaroFProcInt >= 650
        if harpoon.getPos().distanceTo(jotaroFTarget.getPos()) > 200
            harpoon.setPos(harpoon.getPos().polarOffset(harpoon.getPos().angleTo(jotaroFTarget.getPos()), harpoon.getPos().distanceTo(jotaroFTarget.getPos()) / 200))  
    // if jotaroFProcInt == 602
    //     flashEffect("war3mapImported\\punchshot.mdx", starPlatinum.getPos(), 1, starPlatinum.getPos().angleTo(jotaroFTarget.getPos()))        
    if jotaroFProcInt == 700
        starPlatinum.kill()  
    if jotaroFProcInt == 1050
        jotaro.setAnimation(21) 
    if jotaroFProcInt > 1050 and jotaroFProcInt < 1450
        jotaroPos = jotaro.getPos()     
        if jotaroPos.polarOffset(jotaroPos.angleTo(jotaroFTarget.getPos()) + angle(PI), 1).isTerrainPathable(PATHING_TYPE_WALKABILITY) == true and jotaroPos.polarOffset(jotaroPos.angleTo(jotaroFTarget.getPos()) + angle(PI), 1).isTerrainPathable(PATHING_TYPE_FLYABILITY) == true
            DoNothing()
        else                    
            // jotaro.setPos(jotaroPos.polarOffset(jotaroPos.angleTo(jotaroFTarget.getPos()) + angle(180), 1))
            // jotaro.setPos(jotaroPos.polarOffset(jotaroPos.angleTo(jotaroFTarget.getPos()) + angle(90), 1))
            jotaro.setPos(jotaroPos.polarOffset(jotaroPos.angleTo(jotaroFTarget.getPos()) + angle(PI), 1))
    if jotaroFProcInt == 1450
        jotaro.setAnimation(22)
        gg_snd_jotaroF2.play()
    if jotaroFProcInt >= 1675
        if harpoon.getPos().distanceTo(jotaroFTarget.getPos()) > 50
            harpoon.setPos(harpoon.getPos().polarOffset(harpoon.getPos().angleTo(jotaroFTarget.getPos()), 7))                
    // if jotaroFProcInt == 1690
    //     flashEffect("war3mapImported\\BrokenGlass.mdx", jotaroFTarget.getPos(), 4)    
    if jotaroFProcInt == 1700
        jotaroFProcTimer.destr()
        jotaroFDummy.kill()
        // jotaroFInvisibleDummy.kill()
        harpoon.kill()
        // jotaroFDummy2.kill()
        jotaro.setPathing(true)
        jotaro.unpause()
        jotaro.setInvulnerable(false)
        jotaroFTarget.setInvulnerable(false)  
        jotaro.removeAbility(JOTARO_F_BUFF)
        DamageEvent.setNextDamageId(DAMAGE_ABILITY_DELAYED_F)
        DamageEvent.setNextDamageFromCode()
        jotaro.damageTarget(jotaroFTarget, 1, ATTACK_TYPE_MAGIC)        
        jotaroFTarget.unpause()
    // else 
    //     jotaroFProcInt++
    //     if jotaroFTarget.isPaused() == false 
    //         jotaroFTarget.pause()
    //     if jotaroFTarget.isInvulnerable() == false
    //         jotaroFTarget.setInvulnerable(true)    
    //     if jotaro.isPaused() == false
    //         jotaro.pause()
    //     if jotaro.isInvulnerable() == false
    //         jotaro.setInvulnerable(true) 
    //     if jotaroFProcInt == 1
    //         // jotaroFDummy2 = createUnit(JOTARO_F_DUMMY3, jotaroFTarget.getPos().polarOffset(jotaroFTarget.getPos().angleTo(jotaro.getPos()), -1000))
    //         jotaro.setPos(jotaroFTarget.getPos().polarOffset(jotaroFTarget.getPos().angleTo(jotaro.getPos()), -350))  // is this where he walks
    //         jotaro.setFacing(jotaro.getPos().angleTo(jotaroFTarget.getPos()) + angle(PI)) 
    //     if jotaroFProcInt == 575
    //         starPlatinum = createUnit(JOTARO_F_DUMMY2, jotaro.getPos().polarOffset(jotaro.getPos().angleTo(jotaroFTarget.getPos()), 150))
    //         starPlatinum.setFacing(starPlatinum.getPos().angleTo(jotaroFTarget.getPos()))
    //     if jotaroFProcInt == 600
    //         starPlatinum.setAnimation(23)
    //     // if jotaroFProcInt == 602
    //     //     flashEffect("war3mapImported\\punchshot.mdx", starPlatinum.getPos(), 1, starPlatinum.getPos().angleTo(jotaroFTarget.getPos()))        
    //     if jotaroFProcInt == 700
    //         starPlatinum.kill()  
    //     if jotaroFProcInt == 1050
    //         jotaro.setAnimation(21) 
    //     if jotaroFProcInt > 1050 and jotaroFProcInt < 1450
    //         jotaroPos = jotaro.getPos()     
    //         if jotaroPos.polarOffset(jotaroPos.angleTo(jotaroFTarget.getPos()) + angle(PI), 1).isTerrainPathable(PATHING_TYPE_WALKABILITY) == true and jotaroPos.polarOffset(jotaroPos.angleTo(jotaroFTarget.getPos()) + angle(PI), 1).isTerrainPathable(PATHING_TYPE_FLYABILITY) == true
    //             DoNothing()
    //         else                    
    //             // jotaro.setPos(jotaroPos.polarOffset(jotaroPos.angleTo(jotaroFTarget.getPos()) + angle(180), 1))
    //             // jotaro.setPos(jotaroPos.polarOffset(jotaroPos.angleTo(jotaroFTarget.getPos()) + angle(90), 1))
    //             jotaro.setPos(jotaroPos.polarOffset(jotaroPos.angleTo(jotaroFTarget.getPos()) + angle(PI), 1))
    //     if jotaroFProcInt == 1450
    //         jotaro.setAnimation(22)
    //         gg_snd_jotaroF2.play()
    //     // if jotaroFProcInt == 1690
    //     //     flashEffect("war3mapImported\\BrokenGlass.mdx", jotaroFTarget.getPos(), 4)    
    //     if jotaroFProcInt == 1700
    //         jotaroFProcTimer.destr()
    //         jotaroFDummy.kill()
    //         // jotaroFDummy2.kill()
    //         jotaro.setPathing(true)
    //         jotaro.unpause()
    //         jotaro.setInvulnerable(false)
    //         jotaroFTarget.setInvulnerable(false)  
    //         jotaro.removeAbility(JOTARO_F_BUFF)
    //         DamageEvent.setNextDamageId(DAMAGE_ABILITY_DELAYED_F)
    //         DamageEvent.setNextDamageFromCode()
    //         jotaro.damageTarget(jotaroFTarget, 1, ATTACK_TYPE_MAGIC)        
    //         jotaroFTarget.unpause()        