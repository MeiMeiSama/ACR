package Sun

import DummyCaster
import Orders
import ClosureForGroups
import ClosureTimers
import ObjectDefinitions
import ClosureEvents

init
    
    EventListener.add(EVENT_PLAYER_UNIT_USE_ITEM) -> 
        if GetManipulatedItem().getTypeId() == SUN_RING_VONGOLA
            let caster = GetManipulatingUnit()
            let u_Str = caster.getStr(true)
            real missingHp = caster.getMissingHP()
            let heal = missingHp * 0.08 + u_Str * 2

            forUnitsInRange(caster.getPos(), 500) (unit u) ->
                if u.isAllyOf(caster.getOwner())   
                    new DummyCaster()
                    ..owner(caster.getOwner())
                    ..castTarget(SUN_VONGOLA_HOT_DUMMY_SPELL, 1, Orders.innerfire, u)
                    ..origin(u.getPos())
                    u.addHP(heal)
                    missingHp = caster.getMissingHP()
                    doPeriodicallyCounted(1, 3) (CallbackCounted cb) ->
                        let hot = missingHp * 0.02 + u_Str
                        u.addHP(hot)

        else if GetManipulatedItem().getTypeId() == SUN_RING_ARCOBALENO
            let caster = GetManipulatingUnit()
            let u_Str = caster.getStr(true)
            real missingHp = caster.getMissingHP()
            let heal = missingHp * 0.12 + u_Str * 5

            forUnitsInRange(caster.getPos(), 750) (unit u) ->
                if u.isAllyOf(caster.getOwner())   
                    new DummyCaster()
                    ..owner(caster.getOwner())
                    ..castTarget(SUN_ARCO_HOT_DUMMY_SPELL, 1, Orders.innerfire, u)
                    ..origin(caster.getPos())
                    u.addHP(heal)
                    missingHp = caster.getMissingHP()
                    doPeriodicallyCounted(1, 3) (CallbackCounted cb) ->
                        let hot = missingHp * 0.04 + u_Str
                        u.addHP(hot)

