package Thunder

import ClosureForGroups
import ObjectDefinitions
import TerrainUtils
import DummyCaster
import OrderIds
import ACR_Effects
import AbilityGlobals
import DamageEvent
import ACR_TagSystem
import TimerUtils

vec2 array thunderTargetPos
vec2 array thunderUserPos
unit array thunderUser
unit array thunderVictim
int array thunderCount
int array thunderHitCount
group array thunderGroup
effect array thunderEffect
timer array thunderDashEffectDestroyTimer
timer array thunderDashRingHitTimer
timer array thunderDashArcoHitTimer
timer array thunderDashRingStartTimer
timer array thunderDashArcoStartTimer



init
    thunderDash ()

function thunderDashEffectDestroy()
    let id = GetExpiredTimer().getData()
    thunderEffect[id].destr()
    thunderDashEffectDestroyTimer[id].release()


function thunderDashArcoHit()
    let pid = GetExpiredTimer().getData()
    thunderHitCount[pid]++
    thunderVictim[pid].issueImmediateOrder("stop")
    flashEffect(THUNDER_EFFECT, thunderVictim[pid], "origin")
    if thunderHitCount[pid] >= 20
        thunderDashArcoHitTimer[pid].release()

function thunderDashRingHit()
    let pid = GetExpiredTimer().getData()
    thunderHitCount[pid]++
    thunderVictim[pid].issueImmediateOrder("stop")
    flashEffect(THUNDER_EFFECT, thunderVictim[pid], "origin")
    if thunderHitCount[pid] >= 14
        thunderDashRingHitTimer[pid].release()

function thunderDashArcoStart()
    let id = GetExpiredTimer().getData()
    let dmg = ((thunderUser[id].getStr(true) * 4.0) + 200)
    thunderCount[id]++
    if thunderUserPos[id].polarOffset(thunderUserPos[id].angleTo(thunderTargetPos[id]), 100).isTerrainPathable(PATHING_TYPE_WALKABILITY) == true and thunderUserPos[id].polarOffset(thunderUserPos[id].angleTo(thunderTargetPos[id]), 100).isTerrainPathable(PATHING_TYPE_FLYABILITY) == true// This one is weird, but it works this way: if playable area, and not boundary (black terrain) do
        if thunderUser[id].isInvulnerable()
            thunderUser[id].setInvulnerable(false)  
        if thunderUser[id].hasTagPauseEX()
            thunderUser[id].unpauseEx()
            thunderUser[id].removeTagPauseEX()
            thunderGroup[id].clear()
            thunderDashArcoStartTimer[id].release()
    else
        if thunderUserPos[id].distanceTo(thunderTargetPos[id]) >= 100 // if the distance where he wants to dash to is greater than 100, move him
            thunderUser[id].setInvulnerable(true)
            if thunderUser[id].hasTagPauseEX() == false
                thunderUser[id].pauseEx()
                thunderUser[id].addTagPauseEX()
            thunderUser[id].setXY(thunderUserPos[id].polarOffset(thunderUserPos[id].angleTo(thunderTargetPos[id]), 100)) // Polar offset moves "position coordinates" a certain distance with given angle
            thunderUserPos[id] = thunderUser[id].getPos()
            forUnitsInRange(thunderUserPos[id], 250) (unit u) -> // Damage units once in range
                if thunderUser[id].isEnemyOf(u) and thunderGroup[id].has(u) == false and u.isInvulnerable() == false
                    DamageEvent.setNextDamageId(DAMAGE_ABILITY_THUNDER_ARCO)
                    DamageEvent.setNextDamageFromCode()
                    thunderUser[id].damageTarget(u, dmg, ATTACK_TYPE_MAGIC)
                    thunderGroup[id].add(u)
                    new DummyCaster()
                    ..owner(thunderUser[id].getOwner())
                    ..origin(thunderUser[id].getPos())
                    ..castTarget(THUNDER_VONGOLA_SLOW_DUMMY_SPELL, 1, OrderIds.slow, u)
                    let pid = u.getUserData()
                    thunderVictim[pid] = u 
                    thunderHitCount[pid] = 0
                    thunderDashArcoHitTimer[pid] = getTimer()..startPeriodic(0.05, function thunderDashArcoHit)..setData(pid)

        else // if the distance is closer than 100, stop the dash
            if thunderUser[id].isInvulnerable()
                thunderUser[id].setInvulnerable(false) 
            if thunderUser[id].hasTagPauseEX()
                thunderUser[id].unpauseEx()
                thunderUser[id].removeTagPauseEX()
                thunderGroup[id].clear()
                thunderDashArcoStartTimer[id].release()
    if thunderCount[id] >= 10
        if thunderUser[id].isInvulnerable()
            thunderUser[id].setInvulnerable(false) 
        if thunderUser[id].hasTagPauseEX()
            thunderUser[id].unpauseEx()
            thunderUser[id].removeTagPauseEX()
            thunderGroup[id].clear()
            thunderDashArcoStartTimer[id].release()


function thunderDashRingStart()
    let id = GetExpiredTimer().getData()
    let dmg = ((thunderUser[id].getStr(true) * 2.5) + 100)
    thunderCount[id]++
    if thunderUserPos[id].polarOffset(thunderUserPos[id].angleTo(thunderTargetPos[id]), 100).isTerrainPathable(PATHING_TYPE_WALKABILITY) == true and thunderUserPos[id].polarOffset(thunderUserPos[id].angleTo(thunderTargetPos[id]), 100).isTerrainPathable(PATHING_TYPE_FLYABILITY) == true// This one is weird, but it works this way: if playable area, and not boundary (black terrain) do
        if thunderUser[id].isInvulnerable()
            thunderUser[id].setInvulnerable(false)  
        if thunderUser[id].hasTagPauseEX()
            thunderUser[id].unpauseEx()
            thunderUser[id].removeTagPauseEX()
            thunderGroup[id].clear()
            thunderDashRingStartTimer[id].release()
    else
        if thunderUserPos[id].distanceTo(thunderTargetPos[id]) >= 100 // if the distance where he wants to dash to is greater than 100, move him
            thunderUser[id].setInvulnerable(true)
            if thunderUser[id].hasTagPauseEX() == false
                thunderUser[id].pauseEx()
                thunderUser[id].addTagPauseEX()
            thunderUser[id].setXY(thunderUserPos[id].polarOffset(thunderUserPos[id].angleTo(thunderTargetPos[id]), 100)) // Polar offset moves "position coordinates" a certain distance with given angle
            thunderUserPos[id] = thunderUser[id].getPos()
            forUnitsInRange(thunderUserPos[id], 250) (unit u) -> // Damage units once in range
                if thunderUser[id].isEnemyOf(u) and thunderGroup[id].has(u) == false and u.isInvulnerable() == false
                    DamageEvent.setNextDamageId(DAMAGE_ABILITY_THUNDER_RING)
                    DamageEvent.setNextDamageFromCode()
                    thunderUser[id].damageTarget(u, dmg, ATTACK_TYPE_MAGIC)
                    thunderGroup[id].add(u)
                    new DummyCaster()
                    ..owner(thunderUser[id].getOwner())
                    ..origin(thunderUser[id].getPos())
                    ..castTarget(THUNDER_VONGOLA_SLOW_DUMMY_SPELL, 1, OrderIds.slow, u)
                    let pid = u.getUserData()
                    thunderVictim[pid] = u 
                    thunderHitCount[pid] = 0
                    thunderDashRingHitTimer[pid] = getTimer()..startPeriodic(0.05, function thunderDashRingHit)..setData(pid)

        else // if the distance is closer than 100, stop the dash
            if thunderUser[id].isInvulnerable()
                thunderUser[id].setInvulnerable(false) 
            if thunderUser[id].hasTagPauseEX()
                thunderUser[id].unpauseEx()
                thunderUser[id].removeTagPauseEX()
                thunderGroup[id].clear()
                thunderDashRingStartTimer[id].release()
    if thunderCount[id] >= 10
        if thunderUser[id].isInvulnerable()
            thunderUser[id].setInvulnerable(false) 
        if thunderUser[id].hasTagPauseEX()
            thunderUser[id].unpauseEx()
            thunderUser[id].removeTagPauseEX()
            thunderGroup[id].clear()
            thunderDashRingStartTimer[id].release()  


function thunderDash ()
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT)
    ..addAction() ->
        if GetSpellAbilityId() == THUNDER_VONGOLA_ABILITY
            // Variables
            let caster = GetTriggerUnit()
            let id = caster.getOwner().getId()
            let castX = GetSpellTargetX()
            let castY = GetSpellTargetY()
            var spellPos = vec2(castX, castY)
            if thunderGroup[id] == null
                thunderGroup[id] = CreateGroup()
            let pos = caster.getPos()
            thunderUser[id] = caster
            thunderUserPos[id] = pos
            thunderTargetPos[id] = spellPos
            thunderCount[id] = 0
            // Code
            caster.setAnimation("spell")
            if pos.distanceTo(spellPos) > 1000 // If cast range is greater than 1000, set it to 1000
                spellPos = pos.polarOffset(pos.angleTo(spellPos), 1000)
            if pos.distanceTo(spellPos) >= 100 
                thunderEffect[id] = addEffect("war3mapImported\\a_new_k3.mdx", pos)
                thunderEffect[id]..setYaw(pos.angleTo(spellPos))..setScale(1.5)
                BlzSetUnitFacingEx(caster, pos.angleTo(spellPos).degrees())
                caster.setAnimation(1)
                caster.setInvulnerable(true)
                if caster.hasTagPauseEX() == false
                    IssueImmediateOrder(caster, "stop")
                    caster.pauseEx()
                    caster.addTagPauseEX()
                thunderDashEffectDestroyTimer[id] = getTimer()..start(3, function thunderDashEffectDestroy)..setData(id)    
                thunderDashRingStartTimer[id] = getTimer()..startPeriodic(0.03, function thunderDashRingStart)..setData(id)

        else if GetSpellAbilityId() == THUNDER_ARCO_ABILITY
            // Variables
            let caster = GetTriggerUnit()
            let id = caster.getOwner().getId()
            let castX = GetSpellTargetX()
            let castY = GetSpellTargetY()
            var spellPos = vec2(castX, castY)
            if thunderGroup[id] == null
                thunderGroup[id] = CreateGroup()
            let pos = caster.getPos()
            thunderUser[id] = caster
            thunderUserPos[id] = pos
            thunderTargetPos[id] = spellPos
            thunderCount[id] = 0
            // Code
            caster.setAnimation("spell")
            if pos.distanceTo(spellPos) > 1000 // If cast range is greater than 1000, set it to 1000
                spellPos = pos.polarOffset(pos.angleTo(spellPos), 1000)
            if pos.distanceTo(spellPos) >= 100 
                thunderEffect[id] = addEffect("war3mapImported\\a_new_k3.mdx", pos)
                thunderEffect[id]..setYaw(pos.angleTo(spellPos))..setScale(1.5)
                BlzSetUnitFacingEx(caster, pos.angleTo(spellPos).degrees())
                caster.setAnimation(1)
                caster.setInvulnerable(true)
                if caster.hasTagPauseEX() == false
                    IssueImmediateOrder(caster, "stop")
                    caster.pauseEx()
                    caster.addTagPauseEX()
                thunderDashEffectDestroyTimer[id] = getTimer()..start(3, function thunderDashEffectDestroy)..setData(id)    
                thunderDashArcoStartTimer[id] = getTimer()..startPeriodic(0.03, function thunderDashArcoStart)..setData(id)