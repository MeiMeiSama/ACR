package MeleeBonusDamageItem

import TimerUtils
import DamageEvent
import ACR_TagSystem
import ObjectDefinitions

int array meleeBonusDamageCount
unit array meleeBonusDamageUser
real array meleeBonusDamage
timer array meleeBonusDamageTimer

init
    meleeBonusDamage()
function meleeBonusDamage ()
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DAMAGED)
    ..addAction() ->
        if BlzGetEventAttackType() == ATTACK_TYPE_MAGIC and GetEventDamageSource().hasItemById(SWORD_OF_PEW)
            let caster = GetEventDamageSource()
            let id = caster.getOwner().getId()
            let dmg = GetEventDamage()
            meleeBonusDamageUser[id] = caster
            meleeBonusDamage[id] = meleeBonusDamage[id] + dmg
            meleeBonusDamageCount[id] = 0
            if meleeBonusDamageTimer[id] == null
                meleeBonusDamageTimer[id] = CreateTimer()..startPeriodic(0.01, function meleeBonusDamageEnd)..setData(id)

        if BlzGetEventAttackType() == ATTACK_TYPE_HERO and GetEventDamageSource().hasItemById(SWORD_OF_PEW)
            let caster = GetEventDamageSource()
            let victim = BlzGetEventDamageTarget()
            let id = caster.getOwner().getId() 
            if meleeBonusDamage[id] > 0
                DamageEvent.setNextDamageFromCode()
                caster.damageTarget(victim, meleeBonusDamage[id], ATTACK_TYPE_CHAOS) 
                meleeBonusDamage[id] = 0  


function meleeBonusDamageEnd()
    let id = GetExpiredTimer().getData()
    if meleeBonusDamageUser[id].isPaused() == false and meleeBonusDamageUser[id].hasTagPauseEX() == false
        meleeBonusDamageCount[id]++

    if meleeBonusDamageCount[id] >= 300
        meleeBonusDamageCount[id] = 0
        meleeBonusDamageTimer[id].destr()